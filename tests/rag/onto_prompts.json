[
  {
    "class": "Network",
    "parent_class": "ANNConfiguration",
    "prompt": "What networks are defined in the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What networks are defined in the GAN?",
        "output": "discriminator network, generator network?"
      },
      {
        "input": "What networks are defined in the VGG16?",
        "output": "convolutional neural network"
      }
    ]
  },
  {
    "object_property": "hasNetwork",
    "domain_class": "ANNConfiguration",
    "range_class": "Network",
    "prompt": "What network does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What network does ann_configuration_1 have?",
        "output": "The ann_configuration_1 has network_1."
      },
      {
        "input": "Which network is linked to the ANN configuration?",
        "output": "The ANN configuration is linked to network_1."
      }
    ]
  },
  {
    "class": "TaskCharacterization",
    "parent_class": "Network",
    "prompt": "What task characterization is specified for the {parent_class}?",
    "over-write":"{Network}_Type",
    "few_shot_examples": [
      {
        "input": "What task characterization is specified for discriminator network?",
        "output": "classification"
      },
      {
        "input": "What task characterization is specified for the convolutional neural network?",
        "output": "feature extraction"
      }
    ]
  },
  {
    "object_property": "hasTaskType",
    "domain_class": "Network",
    "range_class": "TaskCharacterization",
    "prompt": "What task type does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What task type does network_1 have?",
        "output": "Network_1 has a classification task type."
      },
      {
        "input": "Which task type is associated with the network?",
        "output": "The network is associated with a regression task type."
      }
    ]
  },
  {
    "class": "ObjectiveFunction",
    "parent_class": "TaskCharacterization",
    "over-write": "{Network}_Objective",
    "prompt": "What objective function is used for the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What objective function is used for task_characterization_1?",
        "output": "Task_characterization_1 uses the cross-entropy objective function."
      },
      {
        "input": "Which objective function does the task characterization specify?",
        "output": "The task characterization specifies the mean squared error objective function."
      }
    ]
  },
  {
    "object_property": "hasObjective",
    "domain_class": "TaskCharacterization",
    "range_class": "ObjectiveFunction",
    "prompt": "What objective does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What objective does task_characterization_1 have?",
        "output": "Task_characterization_1 has objective_function_1."
      },
      {
        "input": "Which objective function is linked to the task characterization?",
        "output": "The task characterization is linked to objective_function_1."
      }
    ]
  },
  {
    "class": "CostFunction",
    "parent_class": "ObjectiveFunction",
    "prompt": "What cost function is part of the {parent_class}?",
    "over-write": "{Network}_Cost",
    "few_shot_examples": [
      {
        "input": "What cost function is part of objective_function_1?",
        "output": "Objective_function_1 includes the mean squared error cost function."
      },
      {
        "input": "Which cost function does the objective function use?",
        "output": "The objective function uses the cross-entropy cost function."
      }
    ]
  },
  {
    "object_property": "hasCost",
    "domain_class": "ObjectiveFunction",
    "range_class": "CostFunction",
    "prompt": "What cost function does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What cost function does objective_function_1 have?",
        "output": "Objective_function_1 has cost_function_1."
      },
      {
        "input": "Which cost function is associated with the objective function?",
        "output": "The objective function is associated with cost_function_1."
      }
    ]
  },
  {
    "class": "LossFunction",
    "parent_class": "CostFunction",
    "prompt": "What loss function is included in the {Network}?",
    "few_shot_examples": [
      {
        "input": "What loss function is included in Discriminator?",
        "output": "Cross Entropy Loss"
      },
      {
        "input": "What loss function is included in the Feed Forward Network?",
        "output": "Mean Squared Error"
      }
    ]
  },
  {
    "object_property": "hasLoss",
    "domain_class": "CostFunction",
    "range_class": "LossFunction",
    "prompt": "What loss function does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What loss function does cost_function_1 have?",
        "output": "Cost_function_1 has loss_function_1."
      },
      {
        "input": "Which loss function is linked to the cost function?",
        "output": "The cost function is linked to loss_function_1."
      }
    ]
  },
  {
    "class": "RegularizerFunction",
    "parent_class": "LossFunction",
    "prompt": "What regularizer function is applied in the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What regularizer function is applied in the Cross Entropy Loss?",
        "output": "L2 Regularization"
      },
      {
        "input": "What regularizer function is applied in the Mean Squared Error?",
        "output": "L1 Regularization"
      }
    ]
  },
  {
    "object_property": "hasRegularizer",
    "domain_class": "LossFunction",
    "range_class": "RegularizerFunction",
    "prompt": "What regularizer does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What regularizer does loss_function_1 have?",
        "output": "Loss_function_1 has regularizer_function_1."
      },
      {
        "input": "Which regularizer function is associated with the loss function?",
        "output": "The loss function is associated with regularizer_function_1."
      }
    ]
  },
  {
    "class": "Layer",
    "parent_class": "Network",
    "prompt": "What layers are included in the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What layers are included in Convolutional Neural Network?",
        "output": "convolutional layer 1, max pool layer 1, convolutional layer2, max pool layer 2, convolutional layer 3, convolutional layer 4, convolutional layer 5, max pool layer 3, fully connected layer 1, dropout layer 1, fully connected layer 2, dropout layer 2, fully connected layer 3"
      },
      {
        "input": "What layers are included in Generative Network?",
        "output": "fully connected layer 1, reshape layer 1, reshape layer2, transposed convolution layer 1, batch normalization layer 1, batch normalization layer 2, convolutional layer 1"
      }
    ]
  },
  {
    "object_property": "hasLayer",
    "domain_class": "Network",
    "range_class": "Layer",
    "prompt": "What layers does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What layers does network_1 have?",
        "output": "Network_1 has layers: layer_1 and layer_2."
      },
      {
        "input": "Which layers are associated with the network?",
        "output": "The network is associated with input_layer and output_layer."
      }
    ]
  },
  {
    "data_property": "layer_num_units",
    "parent_class": "Layer",
    "prompt": "How many units are in the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "How many units are in convolutional layer 2?",
        "output": "256"
      },
      {
        "input": "What is the number of units in the fully connected layer 3?",
        "output": "64"
      }
    ]
  },
  {
    "object_property": "nextLayer",
    "domain_class": "Layer",
    "range_class": "Layer",
    "prompt": "What is the next layer after the {domain_class}?",
    "few_shot_examples": [
      {
        "input": "What is the next layer after layer_1?",
        "output": "The next layer after layer_1 is layer_2."
      },
      {
        "input": "Which layer follows the current layer?",
        "output": "Layer_3 follows the current layer."
      }
    ]
  },
  {
    "object_property": "previousLayer",
    "domain_class": "Layer",
    "range_class": "Layer",
    "prompt": "What is the previous layer before the {domain_class}?",
    "few_shot_examples": [
      {
        "input": "What is the previous layer before layer_2?",
        "output": "The previous layer before layer_2 is layer_1."
      },
      {
        "input": "Which layer precedes the current layer?",
        "output": "Layer_1 precedes the current layer."
      }
    ]
  },
  {
    "object_property": "sameLayerAs",
    "domain_class": "Layer",
    "range_class": "Layer",
    "prompt": "Which layers are the same as the {domain_class}?",
    "few_shot_examples": [
      {
        "input": "Which layers are the same as layer_1?",
        "output": "Layer_1 is the same as layer_A."
      },
      {
        "input": "What layers are equivalent to the current layer?",
        "output": "The current layer is equivalent to layer_X."
      }
    ]
  },
  {
    "object_property": "hasOutputLayer",
    "domain_class": "Layer",
    "range_class": "OutputLayer",
    "prompt": "What output layer does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What output layer does layer_1 have?",
        "output": "Layer_1 has output_layer_1."
      },
      {
        "input": "Which output layer is associated with the layer?",
        "output": "The layer is associated with output_layer."
      }
    ]
  },
  {
    "class": "OutputLayer",
    "parent_class": "Layer",
    "prompt": "What is the output layer for the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What is the output layer for layer_1?",
        "output": "The output layer for layer_1 is output_layer_1."
      },
      {
        "input": "Which layer serves as the output layer in the layer?",
        "output": "Output_layer serves as the output layer in the layer."
      }
    ]
  },
  {
    "object_property": "hasInputLayer",
    "domain_class": "OutputLayer",
    "range_class": "InputLayer",
    "prompt": "What input layer does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What input layer does output_layer_1 have?",
        "output": "Output_layer_1 has input_layer_1."
      },
      {
        "input": "Which input layer is connected to the output layer?",
        "output": "Input_layer is connected to the output layer."
      }
    ]
  },
  {
    "class": "InputLayer",
    "parent_class": "Layer",
    "prompt": "What is the input layer for the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What is the input layer for layer_1?",
        "output": "The input layer for layer_1 is input_layer_1."
      },
      {
        "input": "Which layer serves as the input layer in the layer?",
        "output": "Input_layer serves as the input layer in the layer."
      }
    ]
  },
  {
    "object_property": "hasTrainingStrategy",
    "domain_class": "Network",
    "range_class": "TrainingStrategy",
    "prompt": "What training strategy does the {domain_class} use?",
    "few_shot_examples": [
      {
        "input": "What training strategy does network_1 use?",
        "output": "Network_1 uses training_strategy_1."
      },
      {
        "input": "Which training strategy is applied to the network?",
        "output": "The network applies training_strategy."
      }
    ]
  },
  {
    "class": "TrainingStrategy",
    "parent_class": "ANNConfiguration",
    "prompt": "What training strategy is defined in the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What training strategy is defined in ann_configuration_1?",
        "output": "Ann_configuration_1 defines training_strategy_1."
      },
      {
        "input": "Which training strategy does the ANN configuration specify?",
        "output": "The ANN configuration specifies training_strategy."
      }
    ]
  },
  {
    "object_property": "hasTrainedModel",
    "domain_class": "TrainingStrategy",
    "range_class": "TrainedModel",
    "prompt": "What trained model does the {domain_class} produce?",
    "few_shot_examples": [
      {
        "input": "What trained model does training_strategy_1 produce?",
        "output": "Training_strategy_1 produces trained_model_1."
      },
      {
        "input": "Which trained model results from the training strategy?",
        "output": "The training strategy results in trained_model."
      }
    ]
  },
  {
    "class": "TrainedModel",
    "parent_class": "TrainingStrategy",
    "prompt": "What is the trained model from the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What is the trained model from training_strategy_1?",
        "output": "The trained model from training_strategy_1 is trained_model_1."
      },
      {
        "input": "Which model is trained using the training strategy?",
        "output": "Trained_model is trained using the training strategy."
      }
    ]
  },
  {
    "object_property": "hasWeights",
    "domain_class": "TrainedModel",
    "range_class": "TrainedWeights",
    "prompt": "What weights does the {domain_class} have?",
    "few_shot_examples": [
      {
        "input": "What weights does trained_model_1 have?",
        "output": "Trained_model_1 has trained_weights_1."
      },
      {
        "input": "Which weights are associated with the trained model?",
        "output": "Trained_weights are associated with the trained model."
      }
    ]
  },
  {
    "class": "TrainedWeights",
    "parent_class": "TrainedModel",
    "prompt": "What are the trained weights of the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What are the trained weights of trained_model_1?",
        "output": "The trained weights of trained_model_1 are stored in trained_weights_1."
      },
      {
        "input": "Which weights result from the trained model?",
        "output": "Trained_weights result from the trained model."
      }
    ]
  },
  {
    "data_property": "trained_weights_array",
    "parent_class": "TrainedWeights",
    "prompt": "What are the values of the {parent_class} array?",
    "few_shot_examples": [
      {
        "input": "What are the values of trained_weights_1 array?",
        "output": "The values of trained_weights_1 array are [0.5, 0.8, 0.3]."
      },
      {
        "input": "Provide the values in the trained weights array.",
        "output": "The trained weights array contains values: [0.1, 0.2, 0.3]."
      }
    ]
  },
  {
    "object_property": "trainedInLayer",
    "domain_class": "TrainedWeights",
    "range_class": "Layer",
    "prompt": "In which layer are the {domain_class} used as input?",
    "few_shot_examples": [
      {
        "input": "In which layer are trained_weights_1 used as input?",
        "output": "Trained_weights_1 are used as input in layer_2."
      },
      {
        "input": "Which layer consumes these trained weights?",
        "output": "Layer_3 consumes these trained weights."
      }
    ]
  },
  {
    "object_property": "trainedOutLayer",
    "domain_class": "TrainedWeights",
    "range_class": "Layer",
    "prompt": "From which layer are the {domain_class} output?",
    "few_shot_examples": [
      {
        "input": "From which layer are trained_weights_1 output?",
        "output": "Trained_weights_1 are output from layer_1."
      },
      {
        "input": "Which layer produces these trained weights?",
        "output": "Layer_2 produces these trained weights."
      }
    ]
  },
  {
    "object_property": "hasPrimaryTrainingSession",
    "domain_class": "TrainedModel",
    "range_class": "TrainingSession",
    "prompt": "What is the primary training session of the {domain_class}?",
    "few_shot_examples": [
      {
        "input": "What is the primary training session of trained_model_1?",
        "output": "The primary training session of trained_model_1 is training_session_1."
      },
      {
        "input": "Which training session is primary for the trained model?",
        "output": "Training_session is primary for the trained model."
      }
    ]
  },
  {
    "class": "TrainingSession",
    "parent_class": "TrainingStrategy",
    "prompt": "What training sessions are part of the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What training sessions are part of training_strategy_1?",
        "output": "Training_strategy_1 includes training_session_1 and training_session_2."
      },
      {
        "input": "Which training sessions does the training strategy comprise?",
        "output": "The training strategy comprises multiple sessions: session_1, session_2."
      }
    ]
  },
  {
    "object_property": "hasPrimaryTrainingStep",
    "domain_class": "TrainingSession",
    "range_class": "TrainingStep",
    "prompt": "What is the primary training step in the {domain_class}?",
    "few_shot_examples": [
      {
        "input": "What is the primary training step in training_session_1?",
        "output": "The primary training step in training_session_1 is training_step_1."
      },
      {
        "input": "Which training step is primary in the training session?",
        "output": "Training_step_1 is primary in the training session."
      }
    ]
  },
  {
    "class": "TrainingStep",
    "parent_class": "TrainingSession",
    "prompt": "What steps are included in the {parent_class}?",
    "few_shot_examples": [
      {
        "input": "What steps are included in training_session_1?",
        "output": "Training_session_1 includes steps: training_step_1, training_step_2."
      },
      {
        "input": "Which steps are part of the training session?",
        "output": "The training session includes steps such as data loading, model training."
      }
    ]
  },
  {
    "object_property": "nextTrainingStep",
    "domain_class": "TrainingStep",
    "range_class": "TrainingStep",
    "prompt": "What is the next training step after the {domain_class}?",
    "few_shot_examples": [
      {
        "input": "What is the next training step after training_step_1?",
        "output": "The next training step after training_step_1 is training_step_2."
      },
      {
        "input": "Which training step follows the current step?",
        "output": "Training_step_3 follows the current step."
      }
    ]
  },
  {
    "object_property": "hasTrainingStep",
    "domain_class": "TrainingSession",
    "range_class": "TrainingStep",
    "prompt": "What training steps does the {domain_class} include?",
    "few_shot_examples": [
      {
        "input": "What training steps does training_session_1 include?",
        "output": "Training_session_1 includes training_step_1 and training_step_2."
      },
      {
        "input": "Which steps are part of the training session?",
        "output": "The training session includes steps: step_1, step_2."
      }
    ]
  },
  {
    "object_property": "nextTrainingSession",
    "domain_class": "TrainingStep",
    "range_class": "TrainingSession",
    "prompt": "What is the next training session after the {domain_class}?",
    "few_shot_examples": [
      {
        "input": "What is the next training session after training_step_1?",
        "output": "The next training session after training_step_1 is training_session_2."
      },
      {
        "input": "Which training session follows the current training step?",
        "output": "Training_session_3 follows the current training step."
      }
    ]
  },
  {
    "object_property": "hasTrainingSession",
    "domain_class": "TrainingSession",
    "range_class": "TrainingSession",
    "prompt": "What training sessions does the {domain_class} include?",
    "few_shot_examples": [
      {
        "input": "What training sessions does training_session_1 include?",
        "output": "Training_session_1 includes training_session_2."
      },
      {
        "input": "Which sessions are part of the training session?",
        "output": "The training session includes sessions: session_1, session_2."
      }
    ]
  }
]
