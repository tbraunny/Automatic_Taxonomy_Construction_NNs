[
    {
        "page_content": "## Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, † Aaron Courville, Yoshua Bengio ‡\n\n∗ D´ epartement d'informatique et de recherche op´ erationnelle\n\nUniversit´ e de Montr´al e Montr´ eal, QC H3C 3J7",
        "metadata": {
            "section_header": "Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, † Aaron Courville, Yoshua Bengio ‡",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## Abstract\n\nWe propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model G that captures the data distribution, and a discriminative model D that estimates the probability that a sample came from the training data rather than G . The training procedure for G is to maximize the probability of D making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions G and D , a unique solution exists, with G recovering the training data distribution and D equal to 1 2 everywhere. In the case where G and D are defined by multilayer perceptrons, the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitative evaluation of the generated samples.",
        "metadata": {
            "section_header": "Abstract",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 1 Introduction\n\nThe promise of deep learning is to discover rich, hierarchical models [2] that represent probability distributions over the kinds of data encountered in artificial intelligence applications, such as natural images, audio waveforms containing speech, and symbols in natural language corpora. So far, the most striking successes in deep learning have involved discriminative models, usually those that map a high-dimensional, rich sensory input to a class label [14, 22]. These striking successes have primarily been based on the backpropagation and dropout algorithms, using piecewise linear units [19, 9, 10] which have a particularly well-behaved gradient . Deep generative models have had less of an impact, due to the difficulty of approximating many intractable probabilistic computations that arise in maximum likelihood estimation and related strategies, and due to difficulty of leveraging the benefits of piecewise linear units in the generative context. We propose a new generative model estimation procedure that sidesteps these difficulties. 1\n\nIn the proposed adversarial nets framework, the generative model is pitted against an adversary: a discriminative model that learns to determine whether a sample is from the model distribution or the data distribution. The generative model can be thought of as analogous to a team of counterfeiters, trying to produce fake currency and use it without detection, while the discriminative model is analogous to the police, trying to detect the counterfeit currency. Competition in this game drives both teams to improve their methods until the counterfeits are indistiguishable from the genuine articles.\n\n∗ Jean Pouget-Abadie is visiting Universit´ e de Montr´ eal from Ecole Polytechnique.\n\n† Sherjil Ozair is visiting Universit´ de Montr´ eal from Indian Institute of Technology Delhi e\n\n‡ Yoshua Bengio is a CIFAR Senior Fellow.\n\n1 All code and hyperparameters available at http://www.github.com/goodfeli/adversarial\n\nThis framework can yield specific training algorithms for many kinds of model and optimization algorithm. In this article, we explore the special case when the generative model generates samples by passing random noise through a multilayer perceptron, and the discriminative model is also a multilayer perceptron. We refer to this special case as adversarial nets . In this case, we can train both models using only the highly successful backpropagation and dropout algorithms [17] and sample from the generative model using only forward propagation. No approximate inference or Markov chains are necessary.",
        "metadata": {
            "section_header": "Introduction",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 3 Adversarial nets\n\nThe adversarial modeling framework is most straightforward to apply when the models are both multilayer perceptrons. To learn the generator's distribution p g over data x , we define a prior on input noise variables p z ( z ) , then represent a mapping to data space as G ( z ; θ g ) , where G is a differentiable function represented by a multilayer perceptron with parameters θ g . We also define a second multilayer perceptron D ( x ; θ d ) that outputs a single scalar. D ( x ) represents the probability that x came from the data rather than p g . We train D to maximize the probability of assigning the correct label to both training examples and samples from G . We simultaneously train G to minimize log(1 -D G ( ( z ))) :\n\nIn other words, D and G play the following two-player minimax game with value function V ( G,D ) :\n\n<!-- formula-not-decoded -->\n\nIn the next section, we present a theoretical analysis of adversarial nets, essentially showing that the training criterion allows one to recover the data generating distribution as G and D are given enough capacity, i.e., in the non-parametric limit. See Figure 1 for a less formal, more pedagogical explanation of the approach. In practice, we must implement the game using an iterative, numerical approach. Optimizing D to completion in the inner loop of training is computationally prohibitive, and on finite datasets would result in overfitting. Instead, we alternate between k steps of optimizing D and one step of optimizing G . This results in D being maintained near its optimal solution, so long as G changes slowly enough. This strategy is analogous to the way that SML/PCD [31, 29] training maintains samples from a Markov chain from one learning step to the next in order to avoid burning in a Markov chain as part of the inner loop of learning. The procedure is formally presented in Algorithm 1.\n\nIn practice, equation 1 may not provide sufficient gradient for G to learn well. Early in learning, when G is poor, D can reject samples with high confidence because they are clearly different from the training data. In this case, log(1 -D G ( ( z ))) saturates. Rather than training G to minimize log(1 -D G ( ( z ))) we can train G to maximize log D G ( ( z )) . This objective function results in the same fixed point of the dynamics of G and D but provides much stronger gradients early in learning.\n\nX\n\nX X\n\nZ\n\n<!-- image -->\n\nZ Z\n\nFigure 1: Generative adversarial nets are trained by simultaneously updating the d iscriminative distribution ( D , blue, dashed line) so that it discriminates between samples from the data generating distribution (black, dotted line) p x from those of the g enerative distribution p g (G) (green, solid line). The lower horizontal line is the domain from which z is sampled, in this case uniformly. The horizontal line above is part of the domain of x . The upward arrows show how the mapping x = G ( z ) imposes the non-uniform distribution p g on transformed samples. G contracts in regions of high density and expands in regions of low density of p g . (a) Consider an adversarial pair near convergence: p g is similar to p data and D is a partially accurate classifier. (b) In the inner loop of the algorithm D is trained to discriminate samples from data, converging to D ∗ ( x ) = p data ( x ) p data ( x )+ p g ( x ) . (c) After an update to G , gradient of D has guided G ( z ) to flow to regions that are more likely to be classified as data. (d) After several steps of training, if G and D have enough capacity, they will reach a point at which both cannot improve because p g = p data . The discriminator is unable to differentiate between the two distributions, i.e. D ( x ) = 1 2 .",
        "metadata": {
            "section_header": "Adversarial nets",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 4 Theoretical Results\n\nThe generator G implicitly defines a probability distribution p g as the distribution of the samples G ( z ) obtained when z ∼ p z . Therefore, we would like Algorithm 1 to converge to a good estimator of p data , if given enough capacity and training time. The results of this section are done in a nonparametric setting, e.g. we represent a model with infinite capacity by studying convergence in the space of probability density functions.\n\nWe will show in section 4.1 that this minimax game has a global optimum for p g = p data . We will then show in section 4.2 that Algorithm 1 optimizes Eq 1, thus obtaining the desired result.\n\nAlgorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of steps to apply to the discriminator, k , is a hyperparameter. We used k = 1 , the least expensive option, in our experiments.",
        "metadata": {
            "section_header": "Theoretical Results",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## for number of training iterations do\n\nfor k steps do\n\n- · Sample minibatch of m noise samples { z (1) , . . . , z ( m ) } from noise prior p g ( z ) .\n- · Sample minibatch of m examples { x (1) , . . . , x ( m ) } from data generating distribution p data ( x ) .\n- · Update the discriminator by ascending its stochastic gradient:\n\n<!-- formula-not-decoded -->",
        "metadata": {
            "section_header": "for number of training iterations do",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## end for\n\n- · Sample minibatch of m noise samples { z (1) , . . . , z ( m ) } from noise prior p g ( z ) .\n- · Update the generator by descending its stochastic gradient:\n\n<!-- formula-not-decoded -->",
        "metadata": {
            "section_header": "end for",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## end for\n\nThe gradient-based updates can use any standard gradient-based learning rule. We used momentum in our experiments.",
        "metadata": {
            "section_header": "end for",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 4.1 Global Optimality of p g = p data\n\nWe first consider the optimal discriminator D for any given generator G .\n\nProposition 1. For G fixed, the optimal discriminator D is\n\n<!-- formula-not-decoded -->\n\nProof. The training criterion for the discriminator D, given any generator G , is to maximize the quantity V ( G,D )\n\n<!-- formula-not-decoded -->\n\nFor any ( a, b ) ∈ R 2 \\ { 0 0 , } , the function y → a log( y ) + b log(1 -y ) achieves its maximum in [0 , 1] at a a + b . The discriminator does not need to be defined outside of Supp p ( data ) ∪ Supp p ( g ) , concluding the proof.\n\nNote that the training objective for D can be interpreted as maximizing the log-likelihood for estimating the conditional probability P Y ( = y | x ) , where Y indicates whether x comes from p data (with y = 1 ) or from p g (with y = 0 ). The minimax game in Eq. 1 can now be reformulated as:\n\n<!-- formula-not-decoded -->\n\nTheorem 1. The global minimum of the virtual training criterion C G ( ) is achieved if and only if p g = p data . At that point, C G ( ) achieves the value -log 4 .\n\nProof. For p g = p data , D ∗ G ( x ) = 1 2 , (consider Eq. 2). Hence, by inspecting Eq. 4 at D ∗ G ( x ) = 1 2 , we find C G ( ) = log 1 2 +log 1 2 = -log 4 . To see that this is the best possible value of C G ( ) , reached only for p g = p data , observe that\n\n<!-- formula-not-decoded -->\n\nand that by subtracting this expression from C G ( ) = V ( D ,G ∗ G ) , we obtain:\n\n<!-- formula-not-decoded -->\n\nwhere KL is the Kullback-Leibler divergence. We recognize in the previous expression the JensenShannon divergence between the model's distribution and the data generating process:\n\n<!-- formula-not-decoded -->\n\nSince the Jensen-Shannon divergence between two distributions is always non-negative and zero only when they are equal, we have shown that C ∗ = -log(4) is the global minimum of C G ( ) and that the only solution is p g = p data , i.e., the generative model perfectly replicating the data generating process.",
        "metadata": {
            "section_header": "Global Optimality of p g = p data",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 4.2 Convergence of Algorithm 1\n\nProposition 2. If G and D have enough capacity, and at each step of Algorithm 1, the discriminator is allowed to reach its optimum given G , and p g is updated so as to improve the criterion\n\n<!-- formula-not-decoded -->\n\nthen p g converges to p data\n\nProof. Consider V ( G,D ) = U p , D ( g ) as a function of p g as done in the above criterion. Note that U p , D ( g ) is convex in p g . The subderivatives of a supremum of convex functions include the derivative of the function at the point where the maximum is attained. In other words, if f ( x ) = sup α ∈A f α ( x ) and f α ( x ) is convex in x for every α , then ∂f β ( x ) ∈ ∂f if β = arg sup α ∈A f α ( x ) . This is equivalent to computing a gradient descent update for p g at the optimal D given the corresponding G . sup D U p , D ( g ) is convex in p g with a unique global optima as proven in Thm 1, therefore with sufficiently small updates of p g , p g converges to p x , concluding the proof.\n\nIn practice, adversarial nets represent a limited family of p g distributions via the function G ( z ; θ g ) , and we optimize θ g rather than p g itself. Using a multilayer perceptron to define G introduces multiple critical points in parameter space. However, the excellent performance of multilayer perceptrons in practice suggests that they are a reasonable model to use despite their lack of theoretical guarantees.",
        "metadata": {
            "section_header": "Convergence of Algorithm 1",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5 Experiments\n\nWe trained adversarial nets an a range of datasets including MNIST[23], the Toronto Face Database (TFD) [28], and CIFAR-10 [21]. The generator nets used a mixture of rectifier linear activations [19, 9] and sigmoid activations, while the discriminator net used maxout [10] activations. Dropout [17] was applied in training the discriminator net. While our theoretical framework permits the use of dropout and other noise at intermediate layers of the generator, we used noise as the input to only the bottommost layer of the generator network.\n\nWe estimate probability of the test set data under p g by fitting a Gaussian Parzen window to the samples generated with G and reporting the log-likelihood under this distribution. The σ parameter\n\nTable 1: Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean loglikelihood of samples on test set, with the standard error of the mean computed across examples. On TFD, we computed the standard error across folds of the dataset, with a different σ chosen using the validation set of each fold. On TFD, σ was cross validated on each fold and mean log-likelihood on each fold were computed. For MNIST we compare against other models of the real-valued (rather than binary) version of dataset.\n\n| Model            | MNIST       | TFD       |\n|------------------|-------------|-----------|\n| DBN [3]          | 138 ± 2     | 1909 ± 66 |\n| Stacked CAE [3]  | 121 ± 1 . 6 | 2110 ± 50 |\n| Deep GSN [6]     | 214 ± 1 . 1 | 1890 ± 29 |\n| Adversarial nets | 225 ± 2     | 2057 ± 26 |\n\nof the Gaussians was obtained by cross validation on the validation set. This procedure was introduced in Breuleux et al. [8] and used for various generative models for which the exact likelihood is not tractable [25, 3, 5]. Results are reported in Table 1. This method of estimating the likelihood has somewhat high variance and does not perform well in high dimensional spaces but it is the best method available to our knowledge. Advances in generative models that can sample but not estimate likelihood directly motivate further research into how to evaluate such models.\n\nIn Figures 2 and 3 we show samples drawn from the generator net after training. While we make no claim that these samples are better than samples generated by existing methods, we believe that these samples are at least competitive with the better generative models in the literature and highlight the potential of the adversarial framework.\n\n<!-- image -->\n\n<!-- image -->\n\na)\n\n<!-- image -->\n\nb)\n\n<!-- image -->\n\nc)\n\nd)\n\nFigure 2: Visualization of samples from the model. Rightmost column shows the nearest training example of the neighboring sample, in order to demonstrate that the model has not memorized the training set. Samples are fair random draws, not cherry-picked. Unlike most other visualizations of deep generative models, these images show actual samples from the model distributions, not conditional means given samples of hidden units. Moreover, these samples are uncorrelated because the sampling process does not depend on Markov chain mixing. a) MNIST b) TFD c) CIFAR-10 (fully connected model) d) CIFAR-10 (convolutional discriminator and 'deconvolutional' generator)\n\n<!-- image -->\n\nFigure 3: Digits obtained by linearly interpolating between coordinates in z space of the full model.\n\n|                    | Deep directed graphical models             | Deep undirected graphical models                                                         | Generative autoencoders                                                        | Adversarial models                                                             |\n|--------------------|--------------------------------------------|------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------|--------------------------------------------------------------------------------|\n| Training           | Inference needed during training.          | Inference needed during training. MCMCneeded to approximate partition function gradient. | Enforced tradeoff between mixing and power of reconstruction generation        | Synchronizing the discriminator with the generator. Helvetica.                 |\n| Inference          | Learned approximate inference              | Variational inference                                                                    | MCMC-based inference                                                           | Learned approximate inference                                                  |\n| Sampling           | No difficulties                            | Requires Markov chain                                                                    | Requires Markov chain                                                          | No difficulties                                                                |\n| Evaluating p ( x ) | Intractable, may be approximated with AIS  | Intractable, may be approximated with AIS                                                | Not explicitly represented, may be approximated with Parzen density estimation | Not explicitly represented, may be approximated with Parzen density estimation |\n| Model design       | Nearly all models incur extreme difficulty | Careful design needed to ensure multiple properties                                      | Any differentiable function is theoretically permitted                         | Any differentiable function is theoretically permitted                         |\n\nTable 2: Challenges in generative modeling: a summary of the difficulties encountered by different approaches to deep generative modeling for each of the major operations involving a model.",
        "metadata": {
            "section_header": "Experiments",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 6 Advantages and disadvantages\n\nThis new framework comes with advantages and disadvantages relative to previous modeling frameworks. The disadvantages are primarily that there is no explicit representation of p g ( x ) , and that D must be synchronized well with G during training (in particular, G must not be trained too much without updating D , in order to avoid 'the Helvetica scenario' in which G collapses too many values of z to the same value of x to have enough diversity to model p data ), much as the negative chains of a Boltzmann machine must be kept up to date between learning steps. The advantages are that Markov chains are never needed, only backprop is used to obtain gradients, no inference is needed during learning, and a wide variety of functions can be incorporated into the model. Table 2 summarizes the comparison of generative adversarial nets with other generative modeling approaches.\n\nThe aforementioned advantages are primarily computational. Adversarial models may also gain some statistical advantage from the generator network not being updated directly with data examples, but only with gradients flowing through the discriminator. This means that components of the input are not copied directly into the generator's parameters. Another advantage of adversarial networks is that they can represent very sharp, even degenerate distributions, while methods based on Markov chains require that the distribution be somewhat blurry in order for the chains to be able to mix between modes.",
        "metadata": {
            "section_header": "Advantages and disadvantages",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## 7 Conclusions and future work\n\nThis framework admits many straightforward extensions:\n\n- 1. A conditional generative model p ( x | c ) can be obtained by adding c as input to both G and D .\n- 2. Learned approximate inference can be performed by training an auxiliary network to predict z given x . This is similar to the inference net trained by the wake-sleep algorithm [15] but with the advantage that the inference net may be trained for a fixed generator net after the generator net has finished training.\n\nglyph[negationslash]\n\n- 3. One can approximately model all conditionals p ( x S | x S ) where S is a subset of the indices of x by training a family of conditional models that share parameters. Essentially, one can use adversarial nets to implement a stochastic extension of the deterministic MP-DBM [11].\n- 4. Semi-supervised learning : features from the discriminator or inference net could improve performance of classifiers when limited labeled data is available.\n- 5. Efficiency improvements: training could be accelerated greatly by divising better methods for coordinating G and D or determining better distributions to sample z from during training.\n\nThis paper has demonstrated the viability of the adversarial modeling framework, suggesting that these research directions could prove useful.",
        "metadata": {
            "section_header": "Conclusions and future work",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    },
    {
        "page_content": "## Acknowledgments\n\nWe would like to acknowledge Patrice Marcotte, Olivier Delalleau, Kyunghyun Cho, Guillaume Alain and Jason Yosinski for helpful discussions. Yann Dauphin shared his Parzen window evaluation code with us. We would like to thank the developers of Pylearn2 [12] and Theano [7, 1], particularly Fr´d´ eric Bastien who rushed a Theano feature specifically to benefit this project. e Arnaud Bergeron provided much-needed support with LT E X typesetting. We would also like to thank A CIFAR, and Canada Research Chairs for funding, and Compute Canada, and Calcul Qu´ ebec for providing computational resources. Ian Goodfellow is supported by the 2013 Google Fellowship in Deep Learning. Finally, we would like to thank Les Trois Brasseurs for stimulating our creativity.",
        "metadata": {
            "section_header": "Acknowledgments",
            "title": "Generative Adversarial Nets",
            "type": "paper"
        }
    }
]