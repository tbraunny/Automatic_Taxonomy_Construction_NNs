[
    {
        "page_content": "## Max Welling\n\nMachine Learning Group Universiteit van Amsterdam welling.max@gmail.com",
        "metadata": {
            "section_header": "Max Welling",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## Abstract\n\nHow can we perform efficient inference and learning in directed probabilistic models, in the presence of continuous latent variables with intractable posterior distributions, and large datasets? We introduce a stochastic variational inference and learning algorithm that scales to large datasets and, under some mild differentiability conditions, even works in the intractable case. Our contributions are two-fold. First, we show that a reparameterization of the variational lower bound yields a lower bound estimator that can be straightforwardly optimized using standard stochastic gradient methods. Second, we show that for i.i.d. datasets with continuous latent variables per datapoint, posterior inference can be made especially efficient by fitting an approximate inference model (also called a recognition model) to the intractable posterior using the proposed lower bound estimator. Theoretical advantages are reflected in experimental results.",
        "metadata": {
            "section_header": "Abstract",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 1 Introduction\n\nHowcan we perform efficient approximate inference and learning with directed probabilistic models whose continuous latent variables and/or parameters have intractable posterior distributions? The variational Bayesian (VB) approach involves the optimization of an approximation to the intractable posterior. Unfortunately, the common mean-field approach requires analytical solutions of expectations w.r.t. the approximate posterior, which are also intractable in the general case. We show how a reparameterization of the variational lower bound yields a simple differentiable unbiased estimator of the lower bound; this SGVB (Stochastic Gradient Variational Bayes) estimator can be used for efficient approximate posterior inference in almost any model with continuous latent variables and/or parameters, and is straightforward to optimize using standard stochastic gradient ascent techniques.\n\nFor the case of an i.i.d. dataset and continuous latent variables per datapoint, we propose the AutoEncoding VB (AEVB) algorithm. In the AEVB algorithm we make inference and learning especially efficient by using the SGVB estimator to optimize a recognition model that allows us to perform very efficient approximate posterior inference using simple ancestral sampling, which in turn allows us to efficiently learn the model parameters, without the need of expensive iterative inference schemes (such as MCMC) per datapoint. The learned approximate posterior inference model can also be used for a host of tasks such as recognition, denoising, representation and visualization purposes. When a neural network is used for the recognition model, we arrive at the variational auto-encoder .",
        "metadata": {
            "section_header": "Introduction",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 2 Method\n\nThe strategy in this section can be used to derive a lower bound estimator (a stochastic objective function) for a variety of directed graphical models with continuous latent variables. We will restrict ourselves here to the common case where we have an i.i.d. dataset with latent variables per datapoint, and where we like to perform maximum likelihood (ML) or maximum a posteriori (MAP) inference on the (global) parameters, and variational inference on the latent variables. It is, for example,\n\nFigure 1: The type of directed graphical model under consideration. Solid lines denote the generative model p θ ( z ) p θ ( x z | ) , dashed lines denote the variational approximation q φ ( z x | ) to the intractable posterior p θ ( z x | ) . The variational parameters φ are learned jointly with the generative model parameters θ .\n\n<!-- image -->\n\nstraightforward to extend this scenario to the case where we also perform variational inference on the global parameters; that algorithm is put in the appendix, but experiments with that case are left to future work. Note that our method can be applied to online, non-stationary settings, e.g. streaming data, but here we assume a fixed dataset for simplicity.",
        "metadata": {
            "section_header": "Method",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 2.1 Problem scenario\n\nLet us consider some dataset X = { x ( ) i } N i =1 consisting of N i.i.d. samples of some continuous or discrete variable x . We assume that the data are generated by some random process, involving an unobserved continuous random variable z . The process consists of two steps: (1) a value z ( ) i is generated from some prior distribution p θ ∗ ( z ) ; (2) a value x ( ) i is generated from some conditional distribution p θ ∗ ( x z | ) . We assume that the prior p θ ∗ ( z ) and likelihood p θ ∗ ( x z | ) come from parametric families of distributions p θ ( z ) and p θ ( x z | ) , and that their PDFs are differentiable almost everywhere w.r.t. both θ and z . Unfortunately, a lot of this process is hidden from our view: the true parameters θ ∗ as well as the values of the latent variables z ( ) i are unknown to us.\n\nVery importantly, we do not make the common simplifying assumptions about the marginal or posterior probabilities. Conversely, we are here interested in a general algorithm that even works efficiently in the case of:\n\n- 1. Intractability : the case where the integral of the marginal likelihood p θ ( x ) = ∫ p θ ( z ) p θ ( x z | ) d z is intractable (so we cannot evaluate or differentiate the marginal likelihood), where the true posterior density p θ ( z x | ) = p θ ( x z | ) p θ ( z ) /p θ ( x ) is intractable (so the EM algorithm cannot be used), and where the required integrals for any reasonable mean-field VB algorithm are also intractable. These intractabilities are quite common and appear in cases of moderately complicated likelihood functions p θ ( x z | ) , e.g. a neural network with a nonlinear hidden layer.\n- 2. A large dataset : we have so much data that batch optimization is too costly; we would like to make parameter updates using small minibatches or even single datapoints. Samplingbased solutions, e.g. Monte Carlo EM, would in general be too slow, since it involves a typically expensive sampling loop per datapoint.\n\nWe are interested in, and propose a solution to, three related problems in the above scenario:\n\n- 1. Efficient approximate ML or MAP estimation for the parameters θ . The parameters can be of interest themselves, e.g. if we are analyzing some natural process. They also allow us to mimic the hidden random process and generate artificial data that resembles the real data.\n- 2. Efficient approximate posterior inference of the latent variable z given an observed value x for a choice of parameters θ . This is useful for coding or data representation tasks.\n- 3. Efficient approximate marginal inference of the variable x . This allows us to perform all kinds of inference tasks where a prior over x is required. Common applications in computer vision include image denoising, inpainting and super-resolution.\n\nFor the purpose of solving the above problems, let us introduce a recognition model q φ ( z x | ) : an approximation to the intractable true posterior p θ ( z x | ) . Note that in contrast with the approximate posterior in mean-field variational inference, it is not necessarily factorial and its parameters φ are not computed from some closed-form expectation. Instead, we'll introduce a method for learning the recognition model parameters φ jointly with the generative model parameters θ .\n\nFrom a coding theory perspective, the unobserved variables z have an interpretation as a latent representation or code . In this paper we will therefore also refer to the recognition model q φ ( z x | ) as a probabilistic encoder , since given a datapoint x it produces a distribution (e.g. a Gaussian) over the possible values of the code z from which the datapoint x could have been generated. In a similar vein we will refer to p θ ( x z | ) as a probabilistic decoder , since given a code z it produces a distribution over the possible corresponding values of x .",
        "metadata": {
            "section_header": "Problem scenario",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 2.2 The variational bound\n\nThe marginal likelihood is composed of a sum over the marginal likelihoods of individual datapoints log p θ ( x (1) , · · · , x ( N ) ) = ∑ N i =1 log p θ ( x ( ) i ) , which can each be rewritten as:\n\n<!-- formula-not-decoded -->\n\nThe first RHS term is the KL divergence of the approximate from the true posterior. Since this KL-divergence is non-negative, the second RHS term L ( θ φ , ; x ( ) i ) is called the (variational) lower bound on the marginal likelihood of datapoint i , and can be written as:\n\n<!-- formula-not-decoded -->\n\nwhich can also be written as:\n\n<!-- formula-not-decoded -->\n\nWe want to differentiate and optimize the lower bound L ( θ φ , ; x ( ) i ) w.r.t. both the variational parameters φ and generative parameters θ . However, the gradient of the lower bound w.r.t. φ is a bit problematic. The usual (na¨ ıve) Monte Carlo gradient estimator for this type of problem is: ∇ φ E q φ ( z ) [ f ( z )] = E q φ ( z ) [ f ( z ) ∇ q φ ( z ) log q φ ( z ) ] glyph[similarequal] 1 L ∑ L l =1 f ( z ) ∇ q φ ( z ( ) l ) log q φ ( z ( ) l ) where z ( ) l ∼ q φ ( z x | ( ) i ) . This gradient estimator exhibits exhibits very high variance (see e.g. [BJP12]) and is impractical for our purposes.",
        "metadata": {
            "section_header": "The variational bound",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 2.3 The SGVB estimator and AEVB algorithm\n\nIn this section we introduce a practical estimator of the lower bound and its derivatives w.r.t. the parameters. We assume an approximate posterior in the form q φ ( z x | ) , but please note that the technique can be applied to the case q φ ( z ) , i.e. where we do not condition on x , as well. The fully variational Bayesian method for inferring a posterior over the parameters is given in the appendix.\n\nUnder certain mild conditions outlined in section 2.4 for a chosen approximate posterior q φ ( z x | ) we can reparameterize the random variable ˜ z ∼ q φ ( z x | ) using a differentiable transformation g φ ( glyph[epsilon1] , x ) of an (auxiliary) noise variable glyph[epsilon1] :\n\n<!-- formula-not-decoded -->\n\nSee section 2.4 for general strategies for chosing such an approriate distribution p ( glyph[epsilon1] ) and function g φ ( glyph[epsilon1] , x ) . We can now form Monte Carlo estimates of expectations of some function f ( z ) w.r.t. q φ ( z x | ) as follows:\n\n<!-- formula-not-decoded -->\n\nWe apply this technique to the variational lower bound (eq. (2)), yielding our generic Stochastic Gradient Variational Bayes (SGVB) estimator ˜ L A ( θ φ , ; x ( ) i ) glyph[similarequal] L ( θ φ , ; x ( ) i ) :\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nAlgorithm 1 Minibatch version of the Auto-Encoding VB (AEVB) algorithm. Either of the two SGVB estimators in section 2.3 can be used. We use settings M = 100 and L = 1 in experiments.",
        "metadata": {
            "section_header": "The SGVB estimator and AEVB algorithm",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## θ φ , ← Initialize parameters",
        "metadata": {
            "section_header": "Initialize parameters",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## repeat\n\n- X M ← Random minibatch of M datapoints (drawn from full dataset)\n- glyph[epsilon1] ← Random samples from noise distribution p ( glyph[epsilon1] )\n- g ←∇ θ φ , ˜ L M ( θ φ , ; X M , glyph[epsilon1] ) (Gradients of minibatch estimator (8))\n- θ φ , ← Update parameters using gradients g (e.g. SGD or Adagrad [DHS10])\n\nuntil convergence of parameters ( θ φ , )",
        "metadata": {
            "section_header": "repeat",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## return θ φ ,\n\nOften, the KL-divergence D KL ( q φ ( z x | ( ) i ) || p θ ( z )) of eq. (3) can be integrated analytically (see appendix B), such that only the expected reconstruction error E q φ ( z x | ( ) i ) [ log p θ ( x ( ) i | z ) ] requires estimation by sampling. The KL-divergence term can then be interpreted as regularizing φ , encouraging the approximate posterior to be close to the prior p θ ( z ) . This yields a second version of the SGVB estimator ˜ L B ( θ φ , ; x ( ) i ) glyph[similarequal] L ( θ φ , ; x ( ) i ) , corresponding to eq. (3), which typically has less variance than the generic estimator:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nGiven multiple datapoints from a dataset X with N datapoints, we can construct an estimator of the marginal likelihood lower bound of the full dataset, based on minibatches:\n\n<!-- formula-not-decoded -->\n\nwhere the minibatch X M = { x ( ) i } M i =1 is a randomly drawn sample of M datapoints from the full dataset X with N datapoints. In our experiments we found that the number of samples L per datapoint can be set to 1 as long as the minibatch size M was large enough, e.g. M = 100 . Derivatives ∇ θ φ , ˜ L ( θ ; X M ) can be taken, and the resulting gradients can be used in conjunction with stochastic optimization methods such as SGD or Adagrad [DHS10]. See algorithm 1 for a basic approach to compute the stochastic gradients.\n\nA connection with auto-encoders becomes clear when looking at the objective function given at eq. (7). The first term is (the KL divergence of the approximate posterior from the prior) acts as a regularizer, while the second term is a an expected negative reconstruction error. The function g φ ( ) . is chosen such that it maps a datapoint x ( ) i and a random noise vector glyph[epsilon1] ( ) l to a sample from the approximate posterior for that datapoint: z ( i,l ) = g φ ( glyph[epsilon1] ( ) l , x ( ) i ) where z ( i,l ) ∼ q φ ( z x | ( ) i ) . Subsequently, the sample z ( i,l ) is then input to function log p θ ( x ( ) i | z ( i,l ) ) , which equals the probability density (or mass) of datapoint x ( ) i under the generative model, given z ( i,l ) . This term is a negative reconstruction error in auto-encoder parlance.",
        "metadata": {
            "section_header": "return θ φ ,",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 2.4 The reparameterization trick\n\nIn order to solve our problem we invoked an alternative method for generating samples from q φ ( z x | ) . The essential parameterization trick is quite simple. Let z be a continuous random variable, and z ∼ q φ ( z x | ) be some conditional distribution. It is then often possible to express the random variable z as a deterministic variable z = g φ ( glyph[epsilon1] , x ) , where glyph[epsilon1] is an auxiliary variable with independent marginal p ( glyph[epsilon1] ) , and g φ ( ) . is some vector-valued function parameterized by φ .\n\nThis reparameterization is useful for our case since it can be used to rewrite an expectation w.r.t q φ ( z x | ) such that the Monte Carlo estimate of the expectation is differentiable w.r.t. φ . A proof is as follows. Given the deterministic mapping z = g φ ( glyph[epsilon1] , x ) we know that q φ ( z x | ) ∏ i dz i = p ( glyph[epsilon1] ) ∏ i dglyph[epsilon1] i . Therefore 1 , ∫ q φ ( z x | ) f ( z ) d z = ∫ p ( glyph[epsilon1] ) f ( z ) d glyph[epsilon1] = ∫ p ( glyph[epsilon1] ) f ( g φ ( glyph[epsilon1] , x )) d glyph[epsilon1] . It follows\n\n1 Note that for infinitesimals we use the notational convention d z = ∏ i dz i\n\nthat a differentiable estimator can be constructed: ∫ q φ ( z x | ) f ( z ) d z glyph[similarequal] 1 L ∑ L l =1 f ( g φ ( x , glyph[epsilon1] ( ) l )) where glyph[epsilon1] ( ) l ∼ p ( glyph[epsilon1] ) . In section 2.3 we applied this trick to obtain a differentiable estimator of the variational lower bound.\n\nTake, for example, the univariate Gaussian case: let z ∼ p z x ( | ) = N ( µ, σ 2 ) . In this case, a valid reparameterization is z = µ + σglyph[epsilon1] , where glyph[epsilon1] is an auxiliary noise variable glyph[epsilon1] ∼ N (0 , 1) . Therefore, E N ( z µ,σ ; 2 ) [ f ( z )] = E N ( glyph[epsilon1] ;0 1) , [ f ( µ + σglyph[epsilon1] )] glyph[similarequal] 1 L ∑ L l =1 f ( µ + σglyph[epsilon1] ( ) l ) where glyph[epsilon1] ( ) l ∼ N (0 , 1) .\n\nFor which q φ ( z x | ) can we choose such a differentiable transformation g φ ( ) . and auxiliary variable glyph[epsilon1] ∼ p ( glyph[epsilon1] ) ? Three basic approaches are:\n\n- 1. Tractable inverse CDF. In this case, let glyph[epsilon1] ∼ U ( 0 I , ) , and let g φ ( glyph[epsilon1] , x ) be the inverse CDF of q φ ( z x | ) . Examples: Exponential, Cauchy, Logistic, Rayleigh, Pareto, Weibull, Reciprocal, Gompertz, Gumbel and Erlang distributions.\n- 2. Analogous to the Gaussian example, for any 'location-scale' family of distributions we can choose the standard distribution (with location = 0 , scale = 1 ) as the auxiliary variable glyph[epsilon1] , and let g . ( ) = location + scale · glyph[epsilon1] . Examples: Laplace, Elliptical, Student's t, Logistic, Uniform, Triangular and Gaussian distributions.\n- 3. Composition: It is often possible to express random variables as different transformations of auxiliary variables. Examples: Log-Normal (exponentiation of normally distributed variable), Gamma (a sum over exponentially distributed variables), Dirichlet (weighted sum of Gamma variates), Beta, Chi-Squared, and F distributions.\n\nWhen all three approaches fail, good approximations to the inverse CDF exist requiring computations with time complexity comparable to the PDF (see e.g. [Dev86] for some methods).",
        "metadata": {
            "section_header": "The reparameterization trick",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 3 Example: Variational Auto-Encoder\n\nIn this section we'll give an example where we use a neural network for the probabilistic encoder q φ ( z x | ) (the approximation to the posterior of the generative model p θ ( x z , ) ) and where the parameters φ and θ are optimized jointly with the AEVB algorithm.\n\nLet the prior over the latent variables be the centered isotropic multivariate Gaussian p θ ( z ) = N ( z 0 I ; , ) . Note that in this case, the prior lacks parameters. We let p θ ( x z | ) be a multivariate Gaussian (in case of real-valued data) or Bernoulli (in case of binary data) whose distribution parameters are computed from z with a MLP (a fully-connected neural network with a single hidden layer, see appendix C). Note the true posterior p θ ( z x | ) is in this case intractable. While there is much freedom in the form q φ ( z x | ) , we'll assume the true (but intractable) posterior takes on a approximate Gaussian form with an approximately diagonal covariance. In this case, we can let the variational approximate posterior be a multivariate Gaussian with a diagonal covariance structure : 2\n\n<!-- formula-not-decoded -->\n\nwhere the mean and s.d. of the approximate posterior, µ ( ) i and σ ( ) i , are outputs of the encoding MLP, i.e. nonlinear functions of datapoint x ( ) i and the variational parameters φ (see appendix C).\n\nAs explained in section 2.4, we sample from the posterior z ( i,l ) ∼ q φ ( z x | ( ) i ) using z ( i,l ) = g φ ( x ( ) i , glyph[epsilon1] ( ) l ) = µ ( ) i + σ ( ) i glyph[circledot] glyph[epsilon1] ( ) l where glyph[epsilon1] ( ) l ∼ N ( 0 I , ) . With glyph[circledot] we signify an element-wise product. In this model both p θ ( z ) (the prior) and q φ ( z x | ) are Gaussian; in this case, we can use the estimator of eq. (7) where the KL divergence can be computed and differentiated without estimation (see appendix B). The resulting estimator for this model and datapoint x ( ) i is:\n\n<!-- formula-not-decoded -->\n\nAs explained above and in appendix C, the decoding term log p θ ( x ( ) i | z ( i,l ) ) is a Bernoulli or Gaussian MLP, depending on the type of data we are modelling.\n\n2 Note that this is just a (simplifying) choice, and not a limitation of our method.",
        "metadata": {
            "section_header": "Example: Variational Auto-Encoder",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5 Experiments\n\nWe trained generative models of images from the MNIST and Frey Face datasets 3 and compared learning algorithms in terms of the variational lower bound, and the estimated marginal likelihood.\n\nThe generative model (encoder) and variational approximation (decoder) from section 3 were used, where the described encoder and decoder have an equal number of hidden units. Since the Frey Face data are continuous, we used a decoder with Gaussian outputs, identical to the encoder, except that the means were constrained to the interval (0 1) , using a sigmoidal activation function at the\n\n3 Available at http://www.cs.nyu.edu/˜roweis/data.html\n\nFigure 2: Comparison of our AEVB method to the wake-sleep algorithm, in terms of optimizing the lower bound, for different dimensionality of latent space ( N z ). Our method converged considerably faster and reached a better solution in all experiments. Interestingly enough, more latent variables does not result in more overfitting, which is explained by the regularizing effect of the lower bound. Vertical axis: the estimated average variational lower bound per datapoint. The estimator variance was small ( &lt; 1 ) and omitted. Horizontal axis: amount of training points evaluated. Computation took around 20-40 minutes per million training samples with a Intel Xeon CPU running at an effective 40 GFLOPS.\n\n<!-- image -->\n\ndecoder output. Note that with hidden units we refer to the hidden layer of the neural networks of the encoder and decoder.\n\nParameters are updated using stochastic gradient ascent where gradients are computed by differentiating the lower bound estimator ∇ θ φ , L ( θ φ , ; X ) (see algorithm 1), plus a small weight decay term corresponding to a prior p ( θ ) = N (0 , I ) . Optimization of this objective is equivalent to approximate MAP estimation, where the likelihood gradient is approximated by the gradient of the lower bound.\n\nWe compared performance of AEVB to the wake-sleep algorithm [HDFN95]. We employed the same encoder (also called recognition model) for the wake-sleep algorithm and the variational autoencoder. All parameters, both variational and generative, were initialized by random sampling from N (0 0 01) , . , and were jointly stochastically optimized using the MAP criterion. Stepsizes were adapted with Adagrad [DHS10]; the Adagrad global stepsize parameters were chosen from { 0.01, 0.02, 0.1 } based on performance on the training set in the first few iterations. Minibatches of size M = 100 were used, with L = 1 samples per datapoint.\n\nLikelihood lower bound We trained generative models (decoders) and corresponding encoders (a.k.a. recognition models) having 500 hidden units in case of MNIST, and 200 hidden units in case of the Frey Face dataset (to prevent overfitting, since it is a considerably smaller dataset). The chosen number of hidden units is based on prior literature on auto-encoders, and the relative performance of different algorithms was not very sensitive to these choices. Figure 2 shows the results when comparing the lower bounds. Interestingly, superfluous latent variables did not result in overfitting, which is explained by the regularizing nature of the variational bound.\n\nMarginal likelihood For very low-dimensional latent space it is possible to estimate the marginal likelihood of the learned generative models using an MCMC estimator. More information about the marginal likelihood estimator is available in the appendix. For the encoder and decoder we again used neural networks, this time with 100 hidden units, and 3 latent variables; for higher dimensional latent space the estimates became unreliable. Again, the MNIST dataset was used. The AEVB and Wake-Sleep methods were compared to Monte Carlo EM (MCEM) with a Hybrid Monte Carlo (HMC) [DKPR87] sampler; details are in the appendix. We compared the convergence speed for the three algorithms, for a small and large training set size. Results are in figure 3.\n\nFigure 3: Comparison of AEVB to the wake-sleep algorithm and Monte Carlo EM, in terms of the estimated marginal likelihood, for a different number of training points. Monte Carlo EM is not an on-line algorithm, and (unlike AEVB and the wake-sleep method) can't be applied efficiently for the full MNIST dataset.\n\n<!-- image -->\n\nVisualisation of high-dimensional data If we choose a low-dimensional latent space (e.g. 2D), we can use the learned encoders (recognition model) to project high-dimensional data to a lowdimensional manifold. See appendix A for visualisations of the 2D latent manifolds for the MNIST and Frey Face datasets.",
        "metadata": {
            "section_header": "Experiments",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 6 Conclusion\n\nWe have introduced a novel estimator of the variational lower bound, Stochastic Gradient VB (SGVB), for efficient approximate inference with continuous latent variables. The proposed estimator can be straightforwardly differentiated and optimized using standard stochastic gradient methods. For the case of i.i.d. datasets and continuous latent variables per datapoint we introduce an efficient algorithm for efficient inference and learning, Auto-Encoding VB (AEVB), that learns an approximate inference model using the SGVB estimator. The theoretical advantages are reflected in experimental results.",
        "metadata": {
            "section_header": "Conclusion",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## 7 Future work\n\nSince the SGVB estimator and the AEVB algorithm can be applied to almost any inference and learning problem with continuous latent variables, there are plenty of future directions: (i) learning hierarchical generative architectures with deep neural networks (e.g. convolutional networks) used for the encoders and decoders, trained jointly with AEVB; (ii) time-series models (i.e. dynamic Bayesian networks); (iii) application of SGVB to the global parameters; (iv) supervised models with latent variables, useful for learning complicated noise distributions.",
        "metadata": {
            "section_header": "Future work",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## A Visualisations\n\nSee figures 4 and 5 for visualisations of latent space and corresponding observed space of models learned with SGVB.\n\nFigure 4: Visualisations of learned data manifold for generative models with two-dimensional latent space, learned with AEVB. Since the prior of the latent space is Gaussian, linearly spaced coordinates on the unit square were transformed through the inverse CDF of the Gaussian to produce values of the latent variables z . For each of these values z , we plotted the corresponding generative p θ ( x z | ) with the learned parameters θ .\n\n<!-- image -->\n\nFigure 5: Random samples from learned generative models of MNIST for different dimensionalities of latent space.\n\n<!-- image -->",
        "metadata": {
            "section_header": "A Visualisations",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## B Solution of -D KL ( q φ ( z ) || p θ ( z )) , Gaussian case\n\nThe variational lower bound (the objective to be maximized) contains a KL term that can often be integrated analytically. Here we give the solution when both the prior p θ ( z ) = N (0 , I ) and the posterior approximation q φ ( z x | ( ) i ) are Gaussian. Let J be the dimensionality of z . Let µ and σ denote the variational mean and s.d. evaluated at datapoint i , and let µ j and σ j simply denote the j -th element of these vectors. Then:\n\n<!-- formula-not-decoded -->\n\nAnd:\n\nTherefore:\n\n<!-- formula-not-decoded -->\n\nWhen using a recognition model q φ ( z x | ) then µ and s.d. σ are simply functions of x and the variational parameters φ , as exemplified in the text.",
        "metadata": {
            "section_header": "B Solution of -D KL ( q φ ( z ) || p θ ( z )) , Gaussian case",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## C MLP's as probabilistic encoders and decoders\n\nIn variational auto-encoders, neural networks are used as probabilistic encoders and decoders. There are many possible choices of encoders and decoders, depending on the type of data and model. In our example we used relatively simple neural networks, namely multi-layered perceptrons (MLPs). For the encoder we used a MLP with Gaussian output, while for the decoder we used MLPs with either Gaussian or Bernoulli outputs, depending on the type of data.",
        "metadata": {
            "section_header": "C MLP's as probabilistic encoders and decoders",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## C.1 Bernoulli MLP as decoder\n\nIn this case let p θ ( x z | ) be a multivariate Bernoulli whose probabilities are computed from z with a fully-connected neural network with a single hidden layer:\n\n<!-- formula-not-decoded -->\n\nwhere f σ ( ) . is the elementwise sigmoid activation function, and where θ = { W W b b 1 , 2 , 1 , 2 } are the weights and biases of the MLP.",
        "metadata": {
            "section_header": "C.1 Bernoulli MLP as decoder",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## C.2 Gaussian MLP as encoder or decoder\n\nIn this case let encoder or decoder be a multivariate Gaussian with a diagonal covariance structure:\n\n<!-- formula-not-decoded -->\n\nwhere { W W W b b b 3 , 4 , 5 , 3 , 4 , 5 } are the weights and biases of the MLP and part of θ when used as decoder. Note that when this network is used as an encoder q φ ( z x | ) , then z and x are swapped, and the weights and biases are variational parameters φ .",
        "metadata": {
            "section_header": "C.2 Gaussian MLP as encoder or decoder",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## D Marginal likelihood estimator\n\nWederived the following marginal likelihood estimator that produces good estimates of the marginal likelihood as long as the dimensionality of the sampled space is low (less then 5 dimensions), and sufficient samples are taken. Let p θ ( x z , ) = p θ ( z ) p θ ( x z | ) be the generative model we are sampling from, and for a given datapoint x ( ) i we would like to estimate the marginal likelihood p θ ( x ( ) i ) .\n\nThe estimation process consists of three stages:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\n- 1. Sample L values { z ( ) l } from the posterior using gradient-based MCMC, e.g. Hybrid Monte Carlo, using ∇ z log p θ ( z x | ) = ∇ z log p θ ( z ) + ∇ z log p θ ( x z | ) .\n- 2. Fit a density estimator q ( z ) to these samples { z ( ) l } .\n- 3. Again, sample L new values from the posterior. Plug these samples, as well as the fitted q ( z ) , into the following estimator:\n\n<!-- formula-not-decoded -->\n\nDerivation of the estimator:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->",
        "metadata": {
            "section_header": "D Marginal likelihood estimator",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## E Monte Carlo EM\n\nThe Monte Carlo EM algorithm does not employ an encoder, instead it samples from the posterior of the latent variables using gradients of the posterior computed with ∇ z log p θ ( z x | ) = ∇ z log p θ ( z ) + ∇ z log p θ ( x z | ) . The Monte Carlo EM procedure consists of 10 HMC leapfrog steps with an automatically tuned stepsize such that the acceptance rate was 90%, followed by 5 weight updates steps using the acquired sample. For all algorithms the parameters were updated using the Adagrad stepsizes (with accompanying annealing schedule).\n\nThe marginal likelihood was estimated with the first 1000 datapoints from the train and test sets, for each datapoint sampling 50 values from the posterior of the latent variables using Hybrid Monte Carlo with 4 leapfrog steps.",
        "metadata": {
            "section_header": "E Monte Carlo EM",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## F Full VB\n\nAs written in the paper, it is possible to perform variational inference on both the parameters θ and the latent variables z , as opposed to just the latent variables as we did in the paper. Here, we'll derive our estimator for that case.\n\nLet p α ( θ ) be some hyperprior for the parameters introduced above, parameterized by α . The marginal likelihood can be written as:\n\n<!-- formula-not-decoded -->\n\nwhere the first RHS term denotes a KL divergence of the approximate from the true posterior, and where L ( φ ; X ) denotes the variational lower bound to the marginal likelihood:\n\n<!-- formula-not-decoded -->\n\nNote that this is a lower bound since the KL divergence is non-negative; the bound equals the true marginal when the approximate and true posteriors match exactly. The term log p θ ( X ) is composed of a sum over the marginal likelihoods of individual datapoints log p θ ( X ) = ∑ N i =1 log p θ ( x ( ) i ) , which can each be rewritten as:\n\n<!-- formula-not-decoded -->\n\nwhere again the first RHS term is the KL divergence of the approximate from the true posterior, and L ( θ φ , ; x ) is the variational lower bound of the marginal likelihood of datapoint i :\n\n<!-- formula-not-decoded -->\n\nThe expectations on the RHS of eqs (14) and (16) can obviously be written as a sum of three separate expectations, of which the second and third component can sometimes be analytically solved, e.g. when both p θ ( x ) and q φ ( z x | ) are Gaussian. For generality we will here assume that each of these expectations is intractable.\n\nUnder certain mild conditions outlined in section (see paper) for chosen approximate posteriors q φ ( θ ) and q φ ( z x | ) we can reparameterize conditional samples ˜ z ∼ q φ ( z x | ) as\n\n<!-- formula-not-decoded -->\n\nwhere we choose a prior p ( glyph[epsilon1] ) and a function g φ ( glyph[epsilon1] , x ) such that the following holds:\n\n<!-- formula-not-decoded -->\n\nThe same can be done for the approximate posterior q φ ( θ ) :\n\n<!-- formula-not-decoded -->\n\nwhere we, similarly as above, choose a prior p ( ζ ) and a function h φ ( ζ ) such that the following holds:\n\n<!-- formula-not-decoded -->\n\nFor notational conciseness we introduce a shorthand notation f φ ( x z , , θ ) :\n\n<!-- formula-not-decoded -->\n\nUsing equations (20) and (18), the Monte Carlo estimate of the variational lower bound, given datapoint x ( ) i , is:\n\n<!-- formula-not-decoded -->\n\nwhere glyph[epsilon1] ( ) l ∼ p ( glyph[epsilon1] ) and ζ ( ) l ∼ p ( ζ ) . The estimator only depends on samples from p ( glyph[epsilon1] ) and p ( ζ ) which are obviously not influenced by φ , therefore the estimator can be differentiated w.r.t. φ . The resulting stochastic gradients can be used in conjunction with stochastic optimization methods such as SGD or Adagrad [DHS10]. See algorithm 1 for a basic approach to computing stochastic gradients.",
        "metadata": {
            "section_header": "F Full VB",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    },
    {
        "page_content": "## F.1 Example\n\nLet the prior over the parameters and latent variables be the centered isotropic Gaussian p α ( θ ) = N ( z 0 I ; , ) and p θ ( z ) = N ( z 0 I ; , ) . Note that in this case, the prior lacks parameters. Let's also assume that the true posteriors are approximatily Gaussian with an approximately diagonal covariance. In this case, we can let the variational approximate posteriors be multivariate Gaussians with a diagonal covariance structure:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nAlgorithm 2 Pseudocode for computing a stochastic gradient using our estimator. See text for meaning of the functions f φ , g φ and h φ .\n\nRequire: φ (Current value of variational parameters)\n\ng ← 0 for l is 1 to L do x ← Random draw from dataset X glyph[epsilon1] ← Random draw from prior p ( glyph[epsilon1] ) ζ ← Random draw from prior p ( ζ ) g ← g + 1 L ∇ φ φ f ( x , g φ ( glyph[epsilon1] , x ) , h φ ( ζ )) end for return g where µ z and σ z are yet unspecified functions of x . Since they are Gaussian, we can parameterize the variational approximate posteriors:\n\n<!-- formula-not-decoded -->\n\n<!-- formula-not-decoded -->\n\nWith glyph[circledot] we signify an element-wise product. These can be plugged into the lower bound defined above (eqs (21) and (22)).\n\nIn this case it is possible to construct an alternative estimator with a lower variance, since in this model p α ( θ ) , p θ ( z ) , q φ ( θ ) and q φ ( z x | ) are Gaussian, and therefore four terms of f φ can be solved analytically. The resulting estimator is:\n\n<!-- formula-not-decoded -->\n\nµ ( ) i j and σ ( ) i j simply denote the j -th element of vectors µ ( ) i and σ ( ) i .",
        "metadata": {
            "section_header": "F.1 Example",
            "title": "Auto-Encoding Variational Bayes",
            "type": "paper"
        }
    }
]