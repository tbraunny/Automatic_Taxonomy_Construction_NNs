[
    {
        "page_content": "## Abstract",
        "metadata": {
            "section_header": "Abstract",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 1. Introduction\n\nImage-to-image translation is a class of vision and graphics problems where the goal is to learn the mapping between an input image and an output image using a training set of aligned image pairs. However, for many tasks, paired training data will not be available. We present an approach for learning to translate an image from a source domain X to a target domain Y in the absence of paired examples. Our goal is to learn a mapping G : X → Y such that the distribution of images from G X ( ) is indistinguishable from the distribution Y using an adversarial loss. Because this mapping is highly under-constrained, we couple it with an inverse mapping F : Y → X and introduce a cycle consistency loss to enforce F G X ( ( )) ≈ X (and vice versa). Qualitative results are presented on several tasks where paired training data does not exist, including collection style transfer, object transfiguration, season transfer, photo enhancement, etc. Quantitative comparisons against several prior methods demonstrate the superiority of our approach.\n\nWhat did Claude Monet see as he placed his easel by the bank of the Seine near Argenteuil on a lovely spring day in 1873 (Figure 1, top-left)? A color photograph, had it been invented, may have documented a crisp blue sky and a glassy river reflecting it. Monet conveyed his impression of this same scene through wispy brush strokes and a bright palette.\n\nWhat if Monet had happened upon the little harbor in Cassis on a cool summer evening (Figure 1, bottom-left)? A brief stroll through a gallery of Monet paintings makes it possible to imagine how he would have rendered the scene: perhaps in pastel shades, with abrupt dabs of paint, and a somewhat flattened dynamic range.\n\nWe can imagine all this despite never having seen a side by side example of a Monet painting next to a photo of the scene he painted. Instead, we have knowledge of the set of Monet paintings and of the set of landscape photographs. We can reason about the stylistic differences between these\n\n* indicates equal contribution\n\nPaired\n\n…\n\nFigure 2: Paired training data (left) consists of training examples { x , y i i } N i =1 , where the correspondence between x i and y i exists [22]. We instead consider unpaired training data (right), consisting of a source set { x i } N i =1 ( x i ∈ X ) and a target set { y j } M j =1 ( y j ∈ Y ), with no information provided as to which x i matches which y j .\n\n<!-- image -->\n\ntwo sets, and thereby imagine what a scene might look like if we were to 'translate' it from one set into the other.\n\nIn this paper, we present a method that can learn to do the same: capturing special characteristics of one image collection and figuring out how these characteristics could be translated into the other image collection, all in the absence of any paired training examples.\n\nThis problem can be more broadly described as imageto-image translation [22], converting an image from one representation of a given scene, x , to another, y , e.g., grayscale to color, image to semantic labels, edge-map to photograph. Years of research in computer vision, image processing, computational photography, and graphics have produced powerful translation systems in the supervised setting, where example image pairs { x , y i i } N i =1 are available (Figure 2, left), e.g., [11, 19, 22, 23, 28, 33, 45, 56, 58, 62]. However, obtaining paired training data can be difficult and expensive. For example, only a couple of datasets exist for tasks like semantic segmentation (e.g., [4]), and they are relatively small. Obtaining input-output pairs for graphics tasks like artistic stylization can be even more difficult since the desired output is highly complex, typically requiring artistic authoring. For many tasks, like object transfiguration (e.g., zebra ↔ horse, Figure 1 top-middle), the desired output is not even well-defined.\n\nWe therefore seek an algorithm that can learn to translate between domains without paired input-output examples (Figure 2, right). We assume there is some underlying relationship between the domains - for example, that they are two different renderings of the same underlying scene - and seek to learn that relationship. Although we lack supervision in the form of paired examples, we can exploit supervision at the level of sets: we are given one set of images in domain X and a different set in domain Y . We may train a mapping G : X → Y such that the output ˆ = y G x ( ) , x ∈ X , is indistinguishable from images y ∈ Y by an adversary trained to classify ˆ y apart from y . In theory, this objective can induce an output distribution over ˆ y that matches the empirical distribution p data ( y ) (in general, this requires G to be stochastic) [16]. The optimal G thereby translates the domain X to a domain ˆ Y distributed identically to Y . However, such a translation does not guarantee that an individual input x and output y are paired up in a meaningful way - there are infinitely many mappings G that will induce the same distribution over ˆ y . Moreover, in practice, we have found it difficult to optimize the adversarial objective in isolation: standard procedures often lead to the wellknown problem of mode collapse, where all input images map to the same output image and the optimization fails to make progress [15].\n\nThese issues call for adding more structure to our objective. Therefore, we exploit the property that translation should be 'cycle consistent', in the sense that if we translate, e.g., a sentence from English to French, and then translate it back from French to English, we should arrive back at the original sentence [3]. Mathematically, if we have a translator G : X → Y and another translator F : Y → X , then G and F should be inverses of each other, and both mappings should be bijections. We apply this structural assumption by training both the mapping G and F simultaneously, and adding a cycle consistency loss [64] that encourages F G x ( ( )) ≈ x and G F y ( ( )) ≈ y . Combining this loss with adversarial losses on domains X and Y yields our full objective for unpaired image-to-image translation.\n\nWe apply our method to a wide range of applications, including collection style transfer, object transfiguration, season transfer and photo enhancement. We also compare against previous approaches that rely either on hand-defined factorizations of style and content, or on shared embedding functions, and show that our method outperforms these baselines. We provide both PyTorch and Torch implementations. Check out more results at our website.",
        "metadata": {
            "section_header": "Introduction",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 3. Formulation\n\nOur goal is to learn mapping functions between two domains X and Y given training samples { x i } N i =1 where x i ∈ X and { y j } M j =1 where y j ∈ Y 1 . We denote the data distribution as x ∼ p data ( x ) and y ∼ p data ( y ) . As illustrated in Figure 3 (a), our model includes two mappings G : X → Y and F : Y → X . In addition, we introduce two adversarial discriminators D X and D Y , where D X aims to distinguish between images { x } and translated images { F y ( ) } ; in the same way, D Y aims to discriminate between { y } and { G x ( ) } . Our objective contains two types of terms: adversarial losses [16] for matching the distribution of generated images to the data distribution in the target domain; and cycle consistency losses to prevent the learned mappings G and F from contradicting each other.",
        "metadata": {
            "section_header": "Formulation",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 3.1. Adversarial Loss\n\nWe apply adversarial losses [16] to both mapping functions. For the mapping function G : X → Y and its discriminator D Y , we express the objective as:\n\n<!-- formula-not-decoded -->\n\nwhere G tries to generate images G x ( ) that look similar to images from domain Y , while D Y aims to distinguish between translated samples G x ( ) and real samples y . G aims to minimize this objective against an adversary D that tries to maximize it, i.e., min G max D Y L GAN ( G,D Y , X, Y ) . We introduce a similar adversarial loss for the mapping function F : Y → X and its discriminator D X as well: i.e., min F max D X L GAN ( F, D X , Y, X ) .",
        "metadata": {
            "section_header": "Adversarial Loss",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 3.2. Cycle Consistency Loss\n\nAdversarial training can, in theory, learn mappings G and F that produce outputs identically distributed as target domains Y and X respectively (strictly speaking, this requires G and F to be stochastic functions) [15]. However, with large enough capacity, a network can map the same set of input images to any random permutation of images in the target domain, where any of the learned mappings can induce an output distribution that matches the target distribution. Thus, adversarial losses alone cannot guarantee that the learned function can map an individual input x i to a desired output y i . To further reduce the space of possible mapping functions, we argue that the learned mapping\n\n1 We often omit the subscript i and j for simplicity.\n\nFigure 4: The input images x , output images G x ( ) and the reconstructed images F G x ( ( )) from various experiments. From top to bottom: photo ↔ Cezanne, horses ↔ zebras, winter → summer Yosemite, aerial photos ↔ Google maps.\n\n<!-- image -->\n\nfunctions should be cycle-consistent: as shown in Figure 3 (b), for each image x from domain X , the image translation cycle should be able to bring x back to the original image, i.e., x → G x ( ) → F G x ( ( )) ≈ x . We call this forward cycle consistency . Similarly, as illustrated in Figure 3 (c), for each image y from domain Y , G and F should also satisfy backward cycle consistency : y → F y ( ) → G F y ( ( )) ≈ y . We incentivize this behavior using a cycle consistency loss :\n\n<!-- formula-not-decoded -->\n\nIn preliminary experiments, we also tried replacing the L1 norm in this loss with an adversarial loss between F G x ( ( )) and x , and between G F y ( ( )) and y , but did not observe improved performance.\n\nThe behavior induced by the cycle consistency loss can be observed in Figure 4: the reconstructed images F G x ( ( )) end up matching closely to the input images x .",
        "metadata": {
            "section_header": "Cycle Consistency Loss",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 3.3. Full Objective\n\nOur full objective is:\n\n<!-- formula-not-decoded -->\n\nwhere λ controls the relative importance of the two objectives. We aim to solve:\n\n<!-- formula-not-decoded -->\n\nNotice that our model can be viewed as training two 'autoencoders' [20]: we learn one autoencoder F ◦ G : X → X jointly with another G F ◦ : Y → Y . However, these autoencoders each have special internal structures: they map an image to itself via an intermediate representation that is a translation of the image into another domain. Such a setup can also be seen as a special case of 'adversarial autoencoders' [34], which use an adversarial loss to train the bottleneck layer of an autoencoder to match an arbitrary target distribution. In our case, the target distribution for the X → X autoencoder is that of the domain Y .\n\nIn Section 5.1.4, we compare our method against ablations of the full objective, including the adversarial loss L GAN alone and the cycle consistency loss L cyc alone, and empirically show that both objectives play critical roles in arriving at high-quality results. We also evaluate our method with only cycle loss in one direction and show that a single cycle is not sufficient to regularize the training for this under-constrained problem.",
        "metadata": {
            "section_header": "Full Objective",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 4. Implementation\n\nNetwork Architecture We adopt the architecture for our generative networks from Johnson et al. [23] who have shown impressive results for neural style transfer and superresolution. This network contains three convolutions, several residual blocks [18], two fractionally-strided convolutions with stride 1 2 , and one convolution that maps features to RGB. We use 6 blocks for 128 × 128 images and 9 blocks for 256 × 256 and higher-resolution training images. Similar to Johnson et al. [23], we use instance normalization [53]. For the discriminator networks we use 70 × 70 PatchGANs [22, 30, 29], which aim to classify whether 70 × 70 overlapping image patches are real or fake. Such a patch-level discriminator architecture has fewer parameters than a full-image discriminator and can work on arbitrarilysized images in a fully convolutional fashion [22].\n\nTraining details We apply two techniques from recent works to stabilize our model training procedure. First, for L GAN (Equation 1), we replace the negative log likelihood objective by a least-squares loss [35]. This loss is more stable during training and generates higher quality results. In particular, for a GAN loss L GAN ( G,D,X,Y ) , we train the G to minimize E x ∼ p data ( x ) [( D G x ( ( )) -1) 2 ] and train the D to minimize E y ∼ p data ( y ) [( D y ( ) -1) 2 ] + E x ∼ p data ( x ) [ D G x ( ( )) 2 ] .\n\nSecond, to reduce model oscillation [15], we follow Shrivastava et al.'s strategy [46] and update the discrimi- nators using a history of generated images rather than the ones produced by the latest generators. We keep an image buffer that stores the 50 previously created images.\n\nFor all the experiments, we set λ = 10 in Equation 3. We use the Adam solver [26] with a batch size of 1 . All networks were trained from scratch with a learning rate of 0 0002 . . We keep the same learning rate for the first 100 epochs and linearly decay the rate to zero over the next 100 epochs. Please see the appendix (Section 7) for more details about the datasets, architectures, and training procedures.",
        "metadata": {
            "section_header": "Implementation",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5. Results\n\nWe first compare our approach against recent methods for unpaired image-to-image translation on paired datasets where ground truth input-output pairs are available for evaluation. We then study the importance of both the adversarial loss and the cycle consistency loss and compare our full method against several variants. Finally, we demonstrate the generality of our algorithm on a wide range of applications where paired data does not exist. For brevity, we refer to our method as CycleGAN . The PyTorch and Torch code, models, and full results can be found at our website.",
        "metadata": {
            "section_header": "Results",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.1. Evaluation\n\nUsing the same evaluation datasets and metrics as 'pix2pix' [22], we compare our method against several baselines both qualitatively and quantitatively. The tasks include semantic labels ↔ photo on the Cityscapes dataset [4], and map ↔ aerial photo on data scraped from Google Maps. We also perform ablation study on the full loss function.",
        "metadata": {
            "section_header": "Evaluation",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.1.1 Evaluation Metrics\n\nAMT perceptual studies On the map ↔ aerial photo task, we run 'real vs fake' perceptual studies on Amazon Mechanical Turk (AMT) to assess the realism of our outputs. We follow the same perceptual study protocol from Isola et al. [22], except we only gather data from 25 participants per algorithm we tested. Participants were shown a sequence of pairs of images, one a real photo or map and one fake (generated by our algorithm or a baseline), and asked to click on the image they thought was real. The first 10 trials of each session were practice and feedback was given as to whether the participant's response was correct or incorrect. The remaining 40 trials were used to assess the rate at which each algorithm fooled participants. Each session only tested a single algorithm, and participants were only allowed to complete a single session. The numbers we report here are not directly comparable to those in [22] as our ground truth images were processed slightly differently 2 and the participant pool we tested may be differently dis-\n\nFigure 5: Different methods for mapping labels ↔ photos trained on Cityscapes images. From left to right: input, BiGAN/ALI [7, 9], CoGAN [32], feature loss + GAN, SimGAN [46], CycleGAN (ours), pix2pix [22] trained on paired data, and ground truth.\n\n<!-- image -->\n\nFigure 6: Different methods for mapping aerial photos ↔ maps on Google Maps. From left to right: input, BiGAN/ALI [7, 9], CoGAN [32], feature loss + GAN, SimGAN [46], CycleGAN (ours), pix2pix [22] trained on paired data, and ground truth.\n\n<!-- image -->\n\ntributed from those tested in [22] (due to running the experiment at a different date and time). Therefore, our numbers should only be used to compare our current method against the baselines (which were run under identical conditions), rather than against [22].\n\ntation metrics described below. The intuition is that if we generate a photo from a label map of 'car on the road', then we have succeeded if the FCN applied to the generated photo detects 'car on the road'.\n\nFCN score Although perceptual studies may be the gold standard for assessing graphical realism, we also seek an automatic quantitative measure that does not require human experiments. For this, we adopt the 'FCN score' from [22], and use it to evaluate the Cityscapes labels → photo task. The FCN metric evaluates how interpretable the generated photos are according to an off-the-shelf semantic segmentation algorithm (the fully-convolutional network, FCN, from [33]). The FCN predicts a label map for a generated photo. This label map can then be compared against the input ground truth labels using standard semantic segmen-\n\nrun convolutionally on the 512 × 512 images at test time. We choose 256 × 256 in our experiments as many baselines cannot scale up to highresolution images, and CoGAN cannot be tested fully convolutionally.\n\nSemantic segmentation metrics To evaluate the performance of photo → labels, we use the standard metrics from the Cityscapes benchmark [4], including per-pixel accuracy, per-class accuracy, and mean class Intersection-Over-Union (Class IOU) [4].",
        "metadata": {
            "section_header": "Evaluation Metrics",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.1.2 Baselines\n\nCoGAN[32] This method learns one GAN generator for domain X and one for domain Y , with tied weights on the first few layers for shared latent representations. Translation from X to Y can be achieved by finding a latent representation that generates image X and then rendering this latent representation into style Y .\n\nSimGAN [46] Like our method, Shrivastava et al.[46] uses an adversarial loss to train a translation from X to Y .\n\n| Loss               | Map → Photo %Turkers labeled real   | Photo → Map %Turkers labeled real   |\n|--------------------|-------------------------------------|-------------------------------------|\n| CoGAN [32]         | 0.6% ± 0.5%                         | 0.9% ± 0.5%                         |\n| BiGAN/ALI [9, 7]   | 2.1% ± 1.0%                         | 1.9% ± 0.9%                         |\n| SimGAN [46]        | 0.7% ± 0.5%                         | 2.6% ± 1.1%                         |\n| Feature loss + GAN | 1.2% ± 0.6%                         | 0.3% ± 0.2%                         |\n| CycleGAN (ours)    | 26.8% ± 2.8%                        | 23.2% ± 3.4%                        |\n\nTable 1: AMT 'real vs fake' test on maps ↔ aerial photos at 256 × 256 resolution.\n\n| Loss               |   Per-pixel acc. |   Per-class acc. |   Class IOU |\n|--------------------|------------------|------------------|-------------|\n| CoGAN [32]         |             0.4  |             0.1  |        0.06 |\n| BiGAN/ALI [9, 7]   |             0.19 |             0.06 |        0.02 |\n| SimGAN [46]        |             0.2  |             0.1  |        0.04 |\n| Feature loss + GAN |             0.06 |             0.04 |        0.01 |\n| CycleGAN (ours)    |             0.52 |             0.17 |        0.11 |\n| pix2pix [22]       |             0.71 |             0.25 |        0.18 |\n\nTable 2: FCN-scores for different methods, evaluated on Cityscapes labels → photo.\n\n| Loss               |   Per-pixel acc. |   Per-class acc. |   Class IOU |\n|--------------------|------------------|------------------|-------------|\n| CoGAN [32]         |             0.45 |             0.11 |        0.08 |\n| BiGAN/ALI [9, 7]   |             0.41 |             0.13 |        0.07 |\n| SimGAN [46]        |             0.47 |             0.11 |        0.07 |\n| Feature loss + GAN |             0.5  |             0.1  |        0.06 |\n| CycleGAN (ours)    |             0.58 |             0.22 |        0.16 |\n| pix2pix [22]       |             0.85 |             0.4  |        0.32 |\n\nTable 3: Classification performance of photo → labels for different methods on cityscapes.\n\nThe regularization term ‖ x -G x ( ) ‖ 1 i s used to penalize making large changes at pixel level.\n\nFeature loss + GAN We also test a variant of SimGAN [46] where the L1 loss is computed over deep image features using a pretrained network (VGG-16 relu4 2 [47]), rather than over RGB pixel values. Computing distances in deep feature space, like this, is also sometimes referred to as using a 'perceptual loss' [8, 23].\n\nBiGAN/ALI [9, 7] Unconditional GANs [16] learn a generator G : Z → X , that maps a random noise z to an image x . The BiGAN [9] and ALI [7] propose to also learn the inverse mapping function F : X → Z . Though they were originally designed for mapping a latent vector z to an image x , we implemented the same objective for mapping a source image x to a target image y .\n\npix2pix [22] We also compare against pix2pix [22], which is trained on paired data, to see how close we can get to this 'upper bound' without using any paired data.\n\nFor a fair comparison, we implement all the baselines using the same architecture and details as our method, except for CoGAN [32]. CoGAN builds on generators that produce images from a shared latent representation, which is incompatible with our image-to-image network. We use the public implementation of CoGAN instead.",
        "metadata": {
            "section_header": "Baselines",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.1.3 Comparison against baselines\n\nAs can be seen in Figure 5 and Figure 6, we were unable to achieve compelling results with any of the baselines. Our\n\n| Loss                 |   Per-pixel acc. |   Per-class acc. |   Class IOU |\n|----------------------|------------------|------------------|-------------|\n| Cycle alone          |             0.22 |             0.07 |        0.02 |\n| GAN alone            |             0.51 |             0.11 |        0.08 |\n| GAN + forward cycle  |             0.55 |             0.18 |        0.12 |\n| GAN + backward cycle |             0.39 |             0.14 |        0.06 |\n| CycleGAN (ours)      |             0.52 |             0.17 |        0.11 |\n\nTable 4: Ablation study: FCN-scores for different variants of our method, evaluated on Cityscapes labels → photo.\n\n| Loss                 |   Per-pixel acc. |   Per-class acc. |   Class IOU |\n|----------------------|------------------|------------------|-------------|\n| Cycle alone          |             0.1  |             0.05 |        0.02 |\n| GAN alone            |             0.53 |             0.11 |        0.07 |\n| GAN + forward cycle  |             0.49 |             0.11 |        0.07 |\n| GAN + backward cycle |             0.01 |             0.06 |        0.01 |\n| CycleGAN (ours)      |             0.58 |             0.22 |        0.16 |\n\nTable 5: Ablation study: classification performance of photo → labels for different losses, evaluated on Cityscapes.\n\nmethod, on the other hand, can produce translations that are often of similar quality to the fully supervised pix2pix.\n\nTable 1 reports performance regarding the AMT perceptual realism task. Here, we see that our method can fool participants on around a quarter of trials, in both the maps → aerial photos direction and the aerial photos → maps direction at 256 × 256 resolution 3 . All the baselines almost never fooled participants.\n\nTable 2 assesses the performance of the labels → photo task on the Cityscapes and Table 3 evaluates the opposite mapping (photos → labels). In both cases, our method again outperforms the baselines.",
        "metadata": {
            "section_header": "Comparison against baselines",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.1.4 Analysis of the loss function\n\nIn Table 4 and Table 5, we compare against ablations of our full loss. Removing the GAN loss substantially degrades results, as does removing the cycle-consistency loss. We therefore conclude that both terms are critical to our results. We also evaluate our method with the cycle loss in only one direction: GAN + forward cycle loss E x ∼ p data ( x ) [ ‖ F G x ( ( )) - ‖ x 1 ] , or GAN + backward cycle loss E y ∼ p data ( y ) [ ‖ G F y ( ( )) - ‖ y 1 ] (Equation 2) and find that it often incurs training instability and causes mode collapse, especially for the direction of the mapping that was removed. Figure 7 shows several qualitative examples.",
        "metadata": {
            "section_header": "Analysis of the loss function",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.1.5 Image reconstruction quality\n\nIn Figure 4, we show a few random samples of the reconstructed images F G x ( ( )) . We observed that the reconstructed images were often close to the original inputs x , at both training and testing time, even in cases where one domain represents significantly more diverse information, such as map ↔ aerial photos.\n\n3 We also train CycleGAN and pix2pix at 512 × 512 resolution, and observe the comparable performance: maps → aerial photos: CycleGAN: 37 5% . ± 3 6% . and pix2pix: 33 9% . ± 3 1% . ; aerial photos → maps: CycleGAN: 16 5% . ± 4 1% . and pix2pix: 8 5% . ± 2 6% .\n\nFigure 7: Different variants of our method for mapping labels ↔ photos trained on cityscapes. From left to right: input, cycleconsistency loss alone, adversarial loss alone, GAN + forward cycle-consistency loss ( F G x ( ( )) ≈ x ), GAN + backward cycle-consistency loss ( G F y ( ( )) ≈ y ), CycleGAN (our full method), and ground truth. Both Cycle alone and GAN + backward fail to produce images similar to the target domain. GAN alone and GAN + forward suffer from mode collapse, producing identical label maps regardless of the input photo.\n\n<!-- image -->\n\nFigure 8: Example results of CycleGAN on paired datasets used in 'pix2pix' [22] such as architectural labels ↔ photos and edges ↔ shoes.\n\n<!-- image -->",
        "metadata": {
            "section_header": "Image reconstruction quality",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.1.6 Additional results on paired datasets\n\nFigure 8 shows some example results on other paired datasets used in 'pix2pix' [22], such as architectural labels ↔ photos from the CMP Facade Database [40], and edges ↔ shoes from the UT Zappos50K dataset [60]. The image quality of our results is close to those produced by the fully supervised pix2pix while our method learns the mapping without paired supervision.",
        "metadata": {
            "section_header": "Additional results on paired datasets",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 5.2. Applications\n\nWe demonstrate our method on several applications where paired training data does not exist. Please refer to the appendix (Section 7) for more details about the datasets. We observe that translations on training data are often more appealing than those on test data, and full results of all applications on both training and test data can be viewed on our project website.\n\nCollection style transfer (Figure 10 and Figure 11) We train the model on landscape photographs downloaded from Flickr and WikiArt. Unlike recent work on 'neural style transfer' [13], our method learns to mimic the style of an entire collection of artworks, rather than transferring the style of a single selected piece of art. Therefore, we can learn to generate photos in the style of, e.g., Van Gogh, rather than just in the style of Starry Night. The size of the dataset for each artist/style was 526 1073 400 , , , and 563 for Cezanne, Monet, Van Gogh, and Ukiyo-e.\n\nObject transfiguration (Figure 13) The model is trained to translate one object class from ImageNet [5] to another (each class contains around 1000 training images). Turmukhambetov et al. [50] propose a subspace model to translate one object into another object of the same category, while our method focuses on object transfiguration between two visually similar categories.\n\nSeason transfer (Figure 13) The model is trained on 854 winter photos and 1273 summer photos of Yosemite downloaded from Flickr.\n\nPhoto generation from paintings (Figure 12) For painting → photo, we find that it is helpful to introduce an additional loss to encourage the mapping to preserve color composition between the input and output. In particular, we adopt the technique of Taigman et al. [49] and regularize the generator to be near an identity mapping when real samples of the target domain are provided as the input to the generator: i.e., L identity ( G,F ) = E y ∼ p data ( y ) [ ‖ G y ( ) -y ‖ 1 ] + E x ∼ p data ( x ) [ ‖ F x ( ) -x ‖ 1 ] .\n\nInput\n\nCycleGAN\n\nCycleGAN+\n\nL\"#$%&amp;\"&amp;'\n\n<!-- image -->\n\nFigure 9: The effect of the identity mapping loss on Monet's painting → photos. From left to right: input paintings, CycleGAN without identity mapping loss, CycleGAN with identity mapping loss. The identity mapping loss helps preserve the color of the input paintings.\n\nWithout L identity , the generator G and F are free to change the tint of input images when there is no need to. For example, when learning the mapping between Monet's paintings and Flickr photographs, the generator often maps paintings of daytime to photographs taken during sunset, because such a mapping may be equally valid under the adversarial loss and cycle consistency loss. The effect of this identity mapping loss are shown in Figure 9.\n\nIn Figure 12, we show additional results translating Monet's paintings to photographs. This figure and Figure 9 show results on paintings that were included in the training set , whereas for all other experiments in the paper, we only evaluate and show test set results. Because the training set does not include paired data, coming up with a plausible translation for a training set painting is a nontrivial task. Indeed, since Monet is no longer able to create new paintings, generalization to unseen, 'test set', paintings is not a pressing problem.\n\nPhoto enhancement (Figure 14) We show that our method can be used to generate photos with shallower depth of field. We train the model on flower photos downloaded from Flickr. The source domain consists of flower photos taken by smartphones, which usually have deep DoF due to a small aperture. The target contains photos captured by DSLRs with a larger aperture. Our model successfully generates photos with shallower depth of field from the photos taken by smartphones.\n\nComparison with Gatys et al. [13] In Figure 15, we compare our results with neural style transfer [13] on photo stylization. For each row, we first use two representative artworks as the style images for [13]. Our method, on the other hand, can produce photos in the style of entire collection . To compare against neural style transfer of an entire collection, we compute the average Gram Matrix across the target domain and use this matrix to transfer the 'average style' with Gatys et al [13].\n\nFigure 16 demonstrates similar comparisons for other translation tasks. We observe that Gatys et al. [13] requires finding target style images that closely match the desired output, but still often fails to produce photorealistic results, while our method succeeds to generate natural-looking results, similar to the target domain.",
        "metadata": {
            "section_header": "Applications",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 6. Limitations and Discussion\n\nAlthough our method can achieve compelling results in many cases, the results are far from uniformly positive. Figure 17 shows several typical failure cases. On translation tasks that involve color and texture changes, as many of those reported above, the method often succeeds. We have also explored tasks that require geometric changes, with little success. For example, on the task of dog → cat transfiguration, the learned translation degenerates into making minimal changes to the input (Figure 17). This failure might be caused by our generator architectures which are tailored for good performance on the appearance changes. Handling more varied and extreme transformations, especially geometric changes, is an important problem for future work.\n\nSome failure cases are caused by the distribution characteristics of the training datasets. For example, our method has got confused in the horse → zebra example (Figure 17, right), because our model was trained on the wild horse and zebra synsets of ImageNet, which does not contain images of a person riding a horse or zebra.\n\nWe also observe a lingering gap between the results achievable with paired training data and those achieved by our unpaired method. In some cases, this gap may be very hard - or even impossible - to close: for example, our method sometimes permutes the labels for tree and building in the output of the photos → labels task. Resolving this ambiguity may require some form of weak semantic supervision. Integrating weak or semi-supervised data may lead to substantially more powerful translators, still at a fraction of the annotation cost of the fully-supervised systems.\n\nNonetheless, in many cases completely unpaired data is plentifully available and should be made use of. This paper pushes the boundaries of what is possible in this 'unsupervised' setting.\n\nAcknowledgments: We thank Aaron Hertzmann, Shiry Ginosar, Deepak Pathak, Bryan Russell, Eli Shechtman, Richard Zhang, and Tinghui Zhou for many helpful comments. This work was supported in part by NSF SMA1514512, NSF IIS-1633310, a Google Research Award, Intel Corp, and hardware donations from NVIDIA. JYZ is supported by the Facebook Graduate Fellowship and TP is supported by the Samsung Scholarship. The photographs used for style transfer were taken by AE, mostly in France.\n\nFigure 10: Collection style transfer I: we transfer input images into the artistic styles of Monet, Van Gogh, Cezanne, and Ukiyo-e. Please see our website for additional examples.\n\n<!-- image -->\n\nFigure 11: Collection style transfer II: we transfer input images into the artistic styles of Monet, Van Gogh, Cezanne, Ukiyo-e. Please see our website for additional examples.\n\n<!-- image -->\n\nFigure 12: Relatively successful results on mapping Monet's paintings to a photographic style. Please see our website for additional examples.\n\n<!-- image -->\n\nInput\n\nOutput\n\nInput\n\nOutput\n\nhorse → zebra\n\nzebra → horse\n\nwinter Yosemite → summer Yosemite\n\nsummer Yosemite → winter Yosemite\n\napple → orange\n\norange → apple\n\nFigure 13: Our method applied to several translation problems. These images are selected as relatively successful results - please see our website for more comprehensive and random results. In the top two rows, we show results on object transfiguration between horses and zebras, trained on 939 images from the wild horse class and 1177 images from the zebra class in Imagenet [5]. Also check out the horse → zebra demo video. The middle two rows show results on season transfer, trained on winter and summer photos of Yosemite from Flickr. In the bottom two rows, we train our method on 996 apple images and 1020 navel orange images from ImageNet.\n\nInput\n\nOutput\n\n<!-- image -->\n\nFigure 14: Photo enhancement: mapping from a set of smartphone snaps to professional DSLR photographs, the system often learns to produce shallow focus. Here we show some of the most successful results in our test set - average performance is considerably worse. Please see our website for more comprehensive and random examples.\n\n<!-- image -->\n\nInput\n\nGatys et al. (image I) Gatys et al. (image II) Gatys et al. (collection)\n\n<!-- image -->\n\nCycleGAN\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nPhoto → Van Gogh\n\n<!-- image -->\n\nPhoto → Ukiyo-e\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nPhoto → Cezanne\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nFigure 15: We compare our method with neural style transfer [13] on photo stylization. Left to right: input image, results from Gatys et al. [13] using two different representative artworks as style images, results from Gatys et al. [13] using the entire collection of the artist, and CycleGAN (ours).\n\nInput\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nCycleGAN\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nGatys et al. (image I) Gatys et al. (image II) Gatys et al. (collection)\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\napple → orange\n\n<!-- image -->\n\nhorse → zebra\n\n<!-- image -->\n\nMonet → photo\n\n<!-- image -->\n\n<!-- image -->\n\n<!-- image -->\n\nFigure 16: We compare our method with neural style transfer [13] on various applications. From top to bottom: apple → orange, horse → zebra, and Monet → photo. Left to right: input image, results from Gatys et al. [13] using two different images as style images, results from Gatys et al. [13] using all the images from the target domain, and CycleGAN (ours).\n\n<!-- image -->\n\nFigure 17: Typical failure cases of our method. Left: in the task of dog → cat transfiguration, CycleGAN can only make minimal changes to the input. Right: CycleGAN also fails in this horse → zebra example as our model has not seen images of horseback riding during training. Please see our website for more comprehensive results.",
        "metadata": {
            "section_header": "Limitations and Discussion",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 7. Appendix",
        "metadata": {
            "section_header": "Appendix",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 7.1. Training details\n\nWe train our networks from scratch, with a learning rate of 0 0002 . . In practice, we divide the objective by 2 while optimizing D , which slows down the rate at which D learns, relative to the rate of G . We keep the same learning rate for the first 100 epochs and linearly decay the rate to zero over the next 100 epochs. Weights are initialized from a Gaussian distribution N (0 , 0 02) . .\n\nCityscapes label ↔ Photo 2975 training images from the Cityscapes training set [4] with image size 128 × 128 . We used the Cityscapes val set for testing.\n\nMaps ↔ aerial photograph 1096 training images were scraped from Google Maps [22] with image size 256 × 256 . Images were sampled from in and around New York City. Data was then split into train and test about the median latitude of the sampling region (with a buffer region added to ensure that no training pixel appeared in the test set).\n\nArchitectural facades labels ↔ photo 400 training images from the CMP Facade Database [40].\n\nEdges → shoes around 50 000 , training images from UT Zappos50K dataset [60]. The model was trained for 5 epochs.\n\nHorse ↔ Zebra and Apple ↔ Orange We downloaded the images from ImageNet [5] using keywords wild horse , zebra , apple , and navel orange . The images were scaled to 256 × 256 pixels. The training set size of each class: 939 (horse), 1177 (zebra), 996 (apple), and 1020 (orange).\n\nSummer ↔ Winter Yosemite The images were downloaded using Flickr API with the tag yosemite and the datetaken field. Black-and-white photos were pruned. The images were scaled to 256 × 256 pixels. The training size of each class: 1273 (summer) and 854 ( winter).\n\nPhoto ↔ Art for style transfer The art images were downloaded from Wikiart.org. Some artworks that were sketches or too obscene were pruned by hand. The photos were downloaded from Flickr using the combination of tags landscape and landscapephotography . Black-andwhite photos were pruned. The images were scaled to 256 × 256 pixels. The training set size of each class was 1074 (Monet), 584 (Cezanne), 401 (Van Gogh), 1433 (Ukiyo-e), and 6853 (Photographs). The Monet dataset was particularly pruned to include only landscape paintings, and the Van Gogh dataset included only his later works that represent his most recognizable artistic style.\n\nMonet's paintings → photos To achieve high resolution while conserving memory, we used random square crops of the original images for training. To generate results, we passed images of width 512 pixels with correct aspect ratio to the generator network as input. The weight for the identity mapping loss was 0 5 . λ where λ was the weight for cycle consistency loss. We set λ = 10 .\n\nFlower photo enhancement Flower images taken on smartphones were downloaded from Flickr by searching for the photos taken by Apple iPhone 5, 5s, or 6 , with search text flower . DSLR images with shallow DoF were also downloaded from Flickr by search tag flower, dof . The images were scaled to 360 pixels by width. The identity mapping loss of weight 0 5 . λ was used. The training set size of the smartphone and DSLR dataset were 1813 and 3326 , respectively. We set λ = 10 .",
        "metadata": {
            "section_header": "Training details",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    },
    {
        "page_content": "## 7.2. Network architectures\n\nWe provide both PyTorch and Torch implementations.\n\nGenerator architectures We adopt our architectures from Johnson et al. [23]. We use 6 residual blocks for 128 × 128 training images, and 9 residual blocks for 256 × 256 or higher-resolution training images. Below, we follow the naming convention used in the Johnson et al.'s Github repository.\n\nLet c7s1-k denote a 7 × 7 Convolution-InstanceNormReLU layer with k filters and stride 1 . dk denotes a 3 × 3 Convolution-InstanceNorm-ReLU layer with k filters and stride 2 . Reflection padding was used to reduce artifacts. Rk denotes a residual block that contains two 3 × 3 convolutional layers with the same number of filters on both layer. uk denotes a 3 × 3 fractional-strided-ConvolutionInstanceNorm-ReLU layer with k filters and stride 1 2 .\n\nThe network with 6 residual blocks consists of: c7s1-64,d128,d256,R256,R256,R256, R256,R256,R256,u128,u64,c7s1-3\n\nThe network with 9 residual blocks consists of: c7s1-64,d128,d256,R256,R256,R256, R256,R256,R256,R256,R256,R256,u128 u64,c7s1-3\n\nDiscriminator architectures For discriminator networks, we use 70 × 70 PatchGAN [22]. Let Ck denote a 4 × 4 Convolution-InstanceNorm-LeakyReLU layer with k filters and stride 2 . After the last layer, we apply a convolution to produce a 1 -dimensional output. We do not use InstanceNorm for the first C64 layer. We use leaky ReLUs with a slope of 0 2 . . The discriminator architecture is:\n\nC64-C128-C256-C512",
        "metadata": {
            "section_header": "Network architectures",
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "type": "paper"
        }
    }
]