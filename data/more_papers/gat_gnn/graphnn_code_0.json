[
   {
      "page_content": "",
      "metadata": {
         "section_header": "Global Variables",
         "type": "python global"
      }
   },
   {
      "page_content": "import torch.nn as nn\nimport torch.nn.functional as F\nfrom data.more_papers.graphnn_layers import GraphConvolution\nclass GCN(nn.Module):\n\tdef __init__(self, nfeat, nhid, nclass, dropout):\n\t\tsuper(GCN, self).__init__()\n\t\tself.gc1 = GraphConvolution(nfeat, nhid)\n\t\tself.gc2 = GraphConvolution(nhid, nclass)\n\t\tself.dropout = dropout\n\tdef forward(self, x, adj):\n\t\tx = F.relu(self.gc1(x, adj))\n\t\tx = F.dropout(x, self.dropout, training=self.training)\n\t\tx = self.gc2(x, adj)\n\t\treturn F.log_softmax(x, dim=1)",
      "metadata": {
         "section_header": "Global Other",
         "type": "python global"
      }
   },
   {
      "page_content": "Functions: __init__, forward",
      "metadata": {
         "section_header": "GCN",
         "type": "python class"
      }
   },
   {
      "page_content": "\tdef __init__(self, nfeat, nhid, nclass, dropout):\n\t\tsuper(GCN, self).__init__()\n\t\tself.gc1 = GraphConvolution(nfeat, nhid)\n\t\tself.gc2 = GraphConvolution(nhid, nclass)\n\t\tself.dropout = dropout",
      "metadata": {
         "section_header": "__init__",
         "type": "python function"
      }
   },
   {
      "page_content": "\tdef forward(self, x, adj):\n\t\tx = F.relu(self.gc1(x, adj))\n\t\tx = F.dropout(x, self.dropout, training=self.training)\n\t\tx = self.gc2(x, adj)\n\t\treturn F.log_softmax(x, dim=1)",
      "metadata": {
         "section_header": "forward",
         "type": "python function"
      }
   }
]