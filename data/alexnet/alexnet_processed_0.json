{
   "metadata": {
      "file_name": "alexnet.py",
      "file_size": 8433,
      "num_lines": 217,
      "num_functions": 3,
      "num_classes": 1,
      "imports": [
         "os",
         "torch",
         "torch.nn",
         "torch.optim",
         "torch.nn.functional",
         "torch.utils.data",
         "torchvision.datasets",
         "torchvision.transforms",
         "tensorboardX.SummaryWriter"
      ]
   },
   "classes": [
      {
         "name": "AlexNet",
         "methods": {
            "__init__": {
               "parameters": [
                  "self",
                  "num_classes"
               ]
            },
            "init_bias": {
               "parameters": [
                  "self"
               ]
            },
            "forward": {
               "parameters": [
                  "self",
                  "x"
               ]
            }
         },
         "init_function_calls": [
            {
               "function": "__init__",
               "arguments": []
            },
            {
               "function": "Sequential",
               "arguments": [
                  "nn.Conv2d(in_channels=3, out_channels=96, kernel_size=11, stride=4)",
                  "nn.ReLU()",
                  "nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=2)",
                  "nn.MaxPool2d(kernel_size=3, stride=2)",
                  "nn.Conv2d(96, 256, 5, padding=2)",
                  "nn.ReLU()",
                  "nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=2)",
                  "nn.MaxPool2d(kernel_size=3, stride=2)",
                  "nn.Conv2d(256, 384, 3, padding=1)",
                  "nn.ReLU()",
                  "nn.Conv2d(384, 384, 3, padding=1)",
                  "nn.ReLU()",
                  "nn.Conv2d(384, 256, 3, padding=1)",
                  "nn.ReLU()",
                  "nn.MaxPool2d(kernel_size=3, stride=2)"
               ]
            },
            {
               "function": "Sequential",
               "arguments": [
                  "nn.Dropout(p=0.5, inplace=True)",
                  "nn.Linear(in_features=256 * 6 * 6, out_features=4096)",
                  "nn.ReLU()",
                  "nn.Dropout(p=0.5, inplace=True)",
                  "nn.Linear(in_features=4096, out_features=4096)",
                  "nn.ReLU()",
                  "nn.Linear(in_features=4096, out_features=num_classes)"
               ]
            },
            {
               "function": "init_bias",
               "arguments": []
            },
            {
               "function": "Conv2d",
               "arguments": []
            },
            {
               "function": "ReLU",
               "arguments": []
            },
            {
               "function": "LocalResponseNorm",
               "arguments": []
            },
            {
               "function": "MaxPool2d",
               "arguments": []
            },
            {
               "function": "Conv2d",
               "arguments": [
                  "96",
                  "256",
                  "5"
               ]
            },
            {
               "function": "ReLU",
               "arguments": []
            },
            {
               "function": "LocalResponseNorm",
               "arguments": []
            },
            {
               "function": "MaxPool2d",
               "arguments": []
            },
            {
               "function": "Conv2d",
               "arguments": [
                  "256",
                  "384",
                  "3"
               ]
            },
            {
               "function": "ReLU",
               "arguments": []
            },
            {
               "function": "Conv2d",
               "arguments": [
                  "384",
                  "384",
                  "3"
               ]
            },
            {
               "function": "ReLU",
               "arguments": []
            },
            {
               "function": "Conv2d",
               "arguments": [
                  "384",
                  "256",
                  "3"
               ]
            },
            {
               "function": "ReLU",
               "arguments": []
            },
            {
               "function": "MaxPool2d",
               "arguments": []
            },
            {
               "function": "Dropout",
               "arguments": []
            },
            {
               "function": "Linear",
               "arguments": []
            },
            {
               "function": "ReLU",
               "arguments": []
            },
            {
               "function": "Dropout",
               "arguments": []
            },
            {
               "function": "Linear",
               "arguments": []
            },
            {
               "function": "ReLU",
               "arguments": []
            },
            {
               "function": "Linear",
               "arguments": []
            },
            {
               "function": "super",
               "arguments": []
            }
         ]
      }
   ],
   "functions": [
      {
         "name": "__init__",
         "parameters": [
            "self",
            "num_classes"
         ]
      },
      {
         "name": "init_bias",
         "parameters": [
            "self"
         ]
      },
      {
         "name": "forward",
         "parameters": [
            "self",
            "x"
         ]
      }
   ],
   "assignments": [
      {
         "device": "torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
      },
      {
         "NUM_EPOCHS": "90"
      },
      {
         "BATCH_SIZE": "128"
      },
      {
         "MOMENTUM": "0.9"
      },
      {
         "LR_DECAY": "0.0005"
      },
      {
         "LR_INIT": "0.01"
      },
      {
         "IMAGE_DIM": "227"
      },
      {
         "NUM_CLASSES": "1000"
      },
      {
         "DEVICE_IDS": "[0, 1, 2, 3]"
      },
      {
         "INPUT_ROOT_DIR": "'alexnet_data_in'"
      },
      {
         "TRAIN_IMG_DIR": "'alexnet_data_in/imagenet'"
      },
      {
         "OUTPUT_DIR": "'alexnet_data_out'"
      },
      {
         "LOG_DIR": "OUTPUT_DIR + '/tblogs'"
      },
      {
         "CHECKPOINT_DIR": "OUTPUT_DIR + '/models'"
      },
      {
         "seed": "torch.initial_seed()"
      },
      {
         "tbwriter": "SummaryWriter(log_dir=LOG_DIR)"
      },
      {
         "alexnet": "AlexNet(num_classes=NUM_CLASSES).to(device)"
      },
      {
         "alexnet": "torch.nn.parallel.DataParallel(alexnet, device_ids=DEVICE_IDS)"
      },
      {
         "dataset": "datasets.ImageFolder(TRAIN_IMG_DIR, transforms.Compose([transforms.CenterCrop(IMAGE_DIM), transforms.ToTensor(), transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])]))"
      },
      {
         "dataloader": "data.DataLoader(dataset, shuffle=True, pin_memory=True, num_workers=8, drop_last=True, batch_size=BATCH_SIZE)"
      },
      {
         "optimizer": "optim.Adam(params=alexnet.parameters(), lr=0.0001)"
      },
      {
         "lr_scheduler": "optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)"
      },
      {
         "total_steps": "1"
      },
      {
         "output": "alexnet(imgs)"
      },
      {
         "loss": "F.cross_entropy(output, classes)"
      },
      {
         "accuracy": "torch.sum(preds == classes)"
      },
      {
         "avg_grad": "torch.mean(parameter.grad)"
      },
      {
         "avg_weight": "torch.mean(parameter.data)"
      },
      {
         "checkpoint_path": "os.path.join(CHECKPOINT_DIR, 'alexnet_states_e{}.pkl'.format(epoch + 1))"
      },
      {
         "state": "{'epoch': epoch, 'total_steps': total_steps, 'optimizer': optimizer.state_dict(), 'model': alexnet.state_dict(), 'seed': seed}"
      }
   ]
}