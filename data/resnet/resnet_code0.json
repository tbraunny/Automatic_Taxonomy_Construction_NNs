[
   {
      "page_content": "def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):\n\t\"\"\"3x3 convolution with padding\"\"\"\n\treturn nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,\n\t\t\t\t\t padding=dilation, groups=groups, bias=False, dilation=dilation)",
      "metadata": {
         "section_header": "conv3x3",
         "type": "python function"
      }
   },
   {
      "page_content": "def conv1x1(in_planes, out_planes, stride=1):\n\t\"\"\"1x1 convolution\"\"\"\n\treturn nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)",
      "metadata": {
         "section_header": "conv1x1",
         "type": "python function"
      }
   },
   {
      "page_content": "class BasicBlock(nn.Module):\n\texpansion = 1\n\tdef __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,\n\t\t\t\t base_width=64, dilation=1, norm_layer=None):\n\t\tsuper(BasicBlock, self).__init__()\n\t\tif norm_layer is None:\n\t\t\tnorm_layer = nn.BatchNorm2d\n\t\tif groups != 1 or base_width != 64:\n\t\t\traise ValueError('BasicBlock only supports groups=1 and base_width=64')\n\t\tif dilation > 1:\n\t\t\traise NotImplementedError(\"Dilation > 1 not supported in BasicBlock\")\n\t\t# Both self.conv1 and self.downsample layers downsample the input when stride != 1\n\t\tself.conv1 = conv3x3(inplanes, planes, stride)\n\t\tself.bn1 = norm_layer(planes)\n\t\tself.relu = nn.ReLU(inplace=True)\n\t\tself.conv2 = conv3x3(planes, planes)\n\t\tself.bn2 = norm_layer(planes)\n\t\tself.downsample = downsample\n\t\tself.stride = stride\n\tdef forward(self, x):\n\t\tidentity = x\n\t\tout = self.conv1(x)\n\t\tout = self.bn1(out)\n\t\tout = self.relu(out)\n\t\tout = self.conv2(out)\n\t\tout = self.bn2(out)\n\t\tif self.downsample is not None:\n\t\t\tidentity = self.downsample(x)\n\t\tout += identity\n\t\tout = self.relu(out)\n\t\treturn out",
      "metadata": {
         "section_header": "BasicBlock",
         "type": "python class"
      }
   },
   {
      "page_content": "\tdef __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,\n\t\t\t\t base_width=64, dilation=1, norm_layer=None):\n\t\tsuper(BasicBlock, self).__init__()\n\t\tif norm_layer is None:\n\t\t\tnorm_layer = nn.BatchNorm2d\n\t\tif groups != 1 or base_width != 64:\n\t\t\traise ValueError('BasicBlock only supports groups=1 and base_width=64')\n\t\tif dilation > 1:\n\t\t\traise NotImplementedError(\"Dilation > 1 not supported in BasicBlock\")\n\t\t# Both self.conv1 and self.downsample layers downsample the input when stride != 1\n\t\tself.conv1 = conv3x3(inplanes, planes, stride)\n\t\tself.bn1 = norm_layer(planes)\n\t\tself.relu = nn.ReLU(inplace=True)\n\t\tself.conv2 = conv3x3(planes, planes)\n\t\tself.bn2 = norm_layer(planes)\n\t\tself.downsample = downsample\n\t\tself.stride = stride",
      "metadata": {
         "section_header": "__init__",
         "type": "python function"
      }
   },
   {
      "page_content": "\tdef forward(self, x):\n\t\tidentity = x\n\t\tout = self.conv1(x)\n\t\tout = self.bn1(out)\n\t\tout = self.relu(out)\n\t\tout = self.conv2(out)\n\t\tout = self.bn2(out)\n\t\tif self.downsample is not None:\n\t\t\tidentity = self.downsample(x)\n\t\tout += identity\n\t\tout = self.relu(out)\n\t\treturn out",
      "metadata": {
         "section_header": "forward",
         "type": "python function"
      }
   },
   {
      "page_content": "class Bottleneck(nn.Module):\n\t# Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2)\n\t# while original implementation places the stride at the first 1x1 convolution(self.conv1)\n\t# according to \"Deep residual learning for image recognition\"https://arxiv.org/abs/1512.03385.\n\t# This variant is also known as ResNet V1.5 and improves accuracy according to\n\t# https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch.\n\texpansion = 4\n\tdef __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,\n\t\t\t\t base_width=64, dilation=1, norm_layer=None):\n\t\tsuper(Bottleneck, self).__init__()\n\t\tif norm_layer is None:\n\t\t\tnorm_layer = nn.BatchNorm2d\n\t\twidth = int(planes * (base_width / 64.)) * groups\n\t\t# Both self.conv2 and self.downsample layers downsample the input when stride != 1\n\t\tself.conv1 = conv1x1(inplanes, width)\n\t\tself.bn1 = norm_layer(width)\n\t\tself.conv2 = conv3x3(width, width, stride, groups, dilation)\n\t\tself.bn2 = norm_layer(width)\n\t\tself.conv3 = conv1x1(width, planes * self.expansion)\n\t\tself.bn3 = norm_layer(planes * self.expansion)\n\t\tself.relu = nn.ReLU(inplace=True)\n\t\tself.downsample = downsample\n\t\tself.stride = stride\n\tdef forward(self, x):\n\t\tidentity = x\n\t\tout = self.conv1(x)\n\t\tout = self.bn1(out)\n\t\tout = self.relu(out)\n\t\tout = self.conv2(out)\n\t\tout = self.bn2(out)\n\t\tout = self.relu(out)\n\t\tout = self.conv3(out)\n\t\tout = self.bn3(out)\n\t\tif self.downsample is not None:\n\t\t\tidentity = self.downsample(x)\n\t\tout += identity\n\t\tout = self.relu(out)\n\t\treturn out",
      "metadata": {
         "section_header": "Bottleneck",
         "type": "python class"
      }
   },
   {
      "page_content": "\tdef __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,\n\t\t\t\t base_width=64, dilation=1, norm_layer=None):\n\t\tsuper(Bottleneck, self).__init__()\n\t\tif norm_layer is None:\n\t\t\tnorm_layer = nn.BatchNorm2d\n\t\twidth = int(planes * (base_width / 64.)) * groups\n\t\t# Both self.conv2 and self.downsample layers downsample the input when stride != 1\n\t\tself.conv1 = conv1x1(inplanes, width)\n\t\tself.bn1 = norm_layer(width)\n\t\tself.conv2 = conv3x3(width, width, stride, groups, dilation)\n\t\tself.bn2 = norm_layer(width)\n\t\tself.conv3 = conv1x1(width, planes * self.expansion)\n\t\tself.bn3 = norm_layer(planes * self.expansion)\n\t\tself.relu = nn.ReLU(inplace=True)\n\t\tself.downsample = downsample\n\t\tself.stride = stride",
      "metadata": {
         "section_header": "__init__",
         "type": "python function"
      }
   },
   {
      "page_content": "\tdef forward(self, x):\n\t\tidentity = x\n\t\tout = self.conv1(x)\n\t\tout = self.bn1(out)\n\t\tout = self.relu(out)\n\t\tout = self.conv2(out)\n\t\tout = self.bn2(out)\n\t\tout = self.relu(out)\n\t\tout = self.conv3(out)\n\t\tout = self.bn3(out)\n\t\tif self.downsample is not None:\n\t\t\tidentity = self.downsample(x)\n\t\tout += identity\n\t\tout = self.relu(out)\n\t\treturn out",
      "metadata": {
         "section_header": "forward",
         "type": "python function"
      }
   },
   {
      "page_content": "class ResNet(nn.Module):\n\tdef __init__(self, block, layers, num_classes=1000, zero_init_residual=False,\n\t\t\t\t groups=1, width_per_group=64, replace_stride_with_dilation=None,\n\t\t\t\t norm_layer=None):\n\t\tsuper(ResNet, self).__init__()\n\t\tif norm_layer is None:\n\t\t\tnorm_layer = nn.BatchNorm2d\n\t\tself._norm_layer = norm_layer\n\t\tself.inplanes = 64\n\t\tself.dilation = 1\n\t\tif replace_stride_with_dilation is None:\n\t\t\t# each element in the tuple indicates if we should replace\n\t\t\t# the 2x2 stride with a dilated convolution instead\n\t\t\treplace_stride_with_dilation = [False, False, False]\n\t\tif len(replace_stride_with_dilation) != 3:\n\t\t\traise ValueError(\"replace_stride_with_dilation should be None \"\n\t\t\t\t\t\t\t \"or a 3-element tuple, got {}\".format(replace_stride_with_dilation))\n\t\tself.groups = groups\n\t\tself.base_width = width_per_group\n\t\tself.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3,\n\t\t\t\t\t\t\t   bias=False)\n\t\tself.bn1 = norm_layer(self.inplanes)\n\t\tself.relu = nn.ReLU(inplace=True)\n\t\tself.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n\t\tself.layer1 = self._make_layer(block, 64, layers[0])\n\t\tself.layer2 = self._make_layer(block, 128, layers[1], stride=2,\n\t\t\t\t\t\t\t\t\t   dilate=replace_stride_with_dilation[0])\n\t\tself.layer3 = self._make_layer(block, 256, layers[2], stride=2,\n\t\t\t\t\t\t\t\t\t   dilate=replace_stride_with_dilation[1])\n\t\tself.layer4 = self._make_layer(block, 512, layers[3], stride=2,\n\t\t\t\t\t\t\t\t\t   dilate=replace_stride_with_dilation[2])\n\t\tself.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n\t\tself.fc = nn.Linear(512 * block.expansion, num_classes)\n\t\tfor m in self.modules():\n\t\t\tif isinstance(m, nn.Conv2d):\n\t\t\t\tnn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n\t\t\telif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n\t\t\t\tnn.init.constant_(m.weight, 1)\n\t\t\t\tnn.init.constant_(m.bias, 0)\n\t\t# Zero-initialize the last BN in each residual branch,\n\t\t# so that the residual branch starts with zeros, and each residual block behaves like an identity.\n\t\t# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677\n\t\tif zero_init_residual:\n\t\t\tfor m in self.modules():\n\t\t\t\tif isinstance(m, Bottleneck):\n\t\t\t\t\tnn.init.constant_(m.bn3.weight, 0)\n\t\t\t\telif isinstance(m, BasicBlock):\n\t\t\t\t\tnn.init.constant_(m.bn2.weight, 0)\n\tdef _make_layer(self, block, planes, blocks, stride=1, dilate=False):\n\t\tnorm_layer = self._norm_layer\n\t\tdownsample = None\n\t\tprevious_dilation = self.dilation\n\t\tif dilate:\n\t\t\tself.dilation *= stride\n\t\t\tstride = 1\n\t\tif stride != 1 or self.inplanes != planes * block.expansion:\n\t\t\tdownsample = nn.Sequential(\n\t\t\t\tconv1x1(self.inplanes, planes * block.expansion, stride),\n\t\t\t\tnorm_layer(planes * block.expansion),\n\t\t\t)\n\t\tlayers = []\n\t\tlayers.append(block(self.inplanes, planes, stride, downsample, self.groups,\n\t\t\t\t\t\t\tself.base_width, previous_dilation, norm_layer))\n\t\tself.inplanes = planes * block.expansion\n\t\tfor _ in range(1, blocks):\n\t\t\tlayers.append(block(self.inplanes, planes, groups=self.groups,\n\t\t\t\t\t\t\t\tbase_width=self.base_width, dilation=self.dilation,\n\t\t\t\t\t\t\t\tnorm_layer=norm_layer))\n\t\treturn nn.Sequential(*layers)\n\tdef _forward_impl(self, x):\n\t\t# See note [TorchScript super()]\n\t\tx = self.conv1(x)\n\t\tx = self.bn1(x)\n\t\tx = self.relu(x)\n\t\tx = self.maxpool(x)\n\t\tx = self.layer1(x)\n\t\tx = self.layer2(x)\n\t\tx = self.layer3(x)\n\t\tx = self.layer4(x)\n\t\tx = self.avgpool(x)\n\t\tx = torch.flatten(x, 1)\n\t\tx = self.fc(x)\n\t\treturn x\n\tdef forward(self, x):\n\t\treturn self._forward_impl(x)",
      "metadata": {
         "section_header": "ResNet",
         "type": "python class"
      }
   },
   {
      "page_content": "\tdef __init__(self, block, layers, num_classes=1000, zero_init_residual=False,\n\t\t\t\t groups=1, width_per_group=64, replace_stride_with_dilation=None,\n\t\t\t\t norm_layer=None):\n\t\tsuper(ResNet, self).__init__()\n\t\tif norm_layer is None:\n\t\t\tnorm_layer = nn.BatchNorm2d\n\t\tself._norm_layer = norm_layer\n\t\tself.inplanes = 64\n\t\tself.dilation = 1\n\t\tif replace_stride_with_dilation is None:\n\t\t\t# each element in the tuple indicates if we should replace\n\t\t\t# the 2x2 stride with a dilated convolution instead\n\t\t\treplace_stride_with_dilation = [False, False, False]\n\t\tif len(replace_stride_with_dilation) != 3:\n\t\t\traise ValueError(\"replace_stride_with_dilation should be None \"\n\t\t\t\t\t\t\t \"or a 3-element tuple, got {}\".format(replace_stride_with_dilation))\n\t\tself.groups = groups\n\t\tself.base_width = width_per_group\n\t\tself.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3,\n\t\t\t\t\t\t\t   bias=False)\n\t\tself.bn1 = norm_layer(self.inplanes)\n\t\tself.relu = nn.ReLU(inplace=True)\n\t\tself.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n\t\tself.layer1 = self._make_layer(block, 64, layers[0])\n\t\tself.layer2 = self._make_layer(block, 128, layers[1], stride=2,\n\t\t\t\t\t\t\t\t\t   dilate=replace_stride_with_dilation[0])\n\t\tself.layer3 = self._make_layer(block, 256, layers[2], stride=2,\n\t\t\t\t\t\t\t\t\t   dilate=replace_stride_with_dilation[1])\n\t\tself.layer4 = self._make_layer(block, 512, layers[3], stride=2,\n\t\t\t\t\t\t\t\t\t   dilate=replace_stride_with_dilation[2])\n\t\tself.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n\t\tself.fc = nn.Linear(512 * block.expansion, num_classes)\n\t\tfor m in self.modules():\n\t\t\tif isinstance(m, nn.Conv2d):\n\t\t\t\tnn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n\t\t\telif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n\t\t\t\tnn.init.constant_(m.weight, 1)\n\t\t\t\tnn.init.constant_(m.bias, 0)\n\t\t# Zero-initialize the last BN in each residual branch,\n\t\t# so that the residual branch starts with zeros, and each residual block behaves like an identity.\n\t\t# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677\n\t\tif zero_init_residual:\n\t\t\tfor m in self.modules():\n\t\t\t\tif isinstance(m, Bottleneck):\n\t\t\t\t\tnn.init.constant_(m.bn3.weight, 0)\n\t\t\t\telif isinstance(m, BasicBlock):\n\t\t\t\t\tnn.init.constant_(m.bn2.weight, 0)",
      "metadata": {
         "section_header": "__init__",
         "type": "python function"
      }
   },
   {
      "page_content": "\tdef _make_layer(self, block, planes, blocks, stride=1, dilate=False):\n\t\tnorm_layer = self._norm_layer\n\t\tdownsample = None\n\t\tprevious_dilation = self.dilation\n\t\tif dilate:\n\t\t\tself.dilation *= stride\n\t\t\tstride = 1\n\t\tif stride != 1 or self.inplanes != planes * block.expansion:\n\t\t\tdownsample = nn.Sequential(\n\t\t\t\tconv1x1(self.inplanes, planes * block.expansion, stride),\n\t\t\t\tnorm_layer(planes * block.expansion),\n\t\t\t)\n\t\tlayers = []\n\t\tlayers.append(block(self.inplanes, planes, stride, downsample, self.groups,\n\t\t\t\t\t\t\tself.base_width, previous_dilation, norm_layer))\n\t\tself.inplanes = planes * block.expansion\n\t\tfor _ in range(1, blocks):\n\t\t\tlayers.append(block(self.inplanes, planes, groups=self.groups,\n\t\t\t\t\t\t\t\tbase_width=self.base_width, dilation=self.dilation,\n\t\t\t\t\t\t\t\tnorm_layer=norm_layer))\n\t\treturn nn.Sequential(*layers)",
      "metadata": {
         "section_header": "_make_layer",
         "type": "python function"
      }
   },
   {
      "page_content": "\tdef _forward_impl(self, x):\n\t\t# See note [TorchScript super()]\n\t\tx = self.conv1(x)\n\t\tx = self.bn1(x)\n\t\tx = self.relu(x)\n\t\tx = self.maxpool(x)\n\t\tx = self.layer1(x)\n\t\tx = self.layer2(x)\n\t\tx = self.layer3(x)\n\t\tx = self.layer4(x)\n\t\tx = self.avgpool(x)\n\t\tx = torch.flatten(x, 1)\n\t\tx = self.fc(x)\n\t\treturn x",
      "metadata": {
         "section_header": "_forward_impl",
         "type": "python function"
      }
   },
   {
      "page_content": "\tdef forward(self, x):\n\t\treturn self._forward_impl(x)",
      "metadata": {
         "section_header": "forward",
         "type": "python function"
      }
   },
   {
      "page_content": "def _resnet(arch, block, layers, pretrained, progress, **kwargs):\n\tmodel = ResNet(block, layers, **kwargs)\n\tif pretrained:\n\t\tstate_dict = load_state_dict_from_url(model_urls[arch],\n\t\t\t\t\t\t\t\t\t\t\t  progress=progress)\n\t\tmodel.load_state_dict(state_dict)\n\treturn model",
      "metadata": {
         "section_header": "_resnet",
         "type": "python function"
      }
   },
   {
      "page_content": "def resnet18(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"ResNet-18 model from\n\t`\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\treturn _resnet('resnet18', BasicBlock, [2, 2, 2, 2], pretrained, progress,\n\t\t\t\t   **kwargs)",
      "metadata": {
         "section_header": "resnet18",
         "type": "python function"
      }
   },
   {
      "page_content": "def resnet34(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"ResNet-34 model from\n\t`\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\treturn _resnet('resnet34', BasicBlock, [3, 4, 6, 3], pretrained, progress,\n\t\t\t\t   **kwargs)",
      "metadata": {
         "section_header": "resnet34",
         "type": "python function"
      }
   },
   {
      "page_content": "def resnet50(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"ResNet-50 model from\n\t`\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\treturn _resnet('resnet50', Bottleneck, [3, 4, 6, 3], pretrained, progress,\n\t\t\t\t   **kwargs)",
      "metadata": {
         "section_header": "resnet50",
         "type": "python function"
      }
   },
   {
      "page_content": "def resnet101(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"ResNet-101 model from\n\t`\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\treturn _resnet('resnet101', Bottleneck, [3, 4, 23, 3], pretrained, progress,\n\t\t\t\t   **kwargs)",
      "metadata": {
         "section_header": "resnet101",
         "type": "python function"
      }
   },
   {
      "page_content": "def resnet152(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"ResNet-152 model from\n\t`\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\treturn _resnet('resnet152', Bottleneck, [3, 8, 36, 3], pretrained, progress,\n\t\t\t\t   **kwargs)",
      "metadata": {
         "section_header": "resnet152",
         "type": "python function"
      }
   },
   {
      "page_content": "def resnext50_32x4d(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"ResNeXt-50 32x4d model from\n\t`\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\tkwargs['groups'] = 32\n\tkwargs['width_per_group'] = 4\n\treturn _resnet('resnext50_32x4d', Bottleneck, [3, 4, 6, 3],\n\t\t\t\t   pretrained, progress, **kwargs)",
      "metadata": {
         "section_header": "resnext50_32x4d",
         "type": "python function"
      }
   },
   {
      "page_content": "def resnext101_32x8d(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"ResNeXt-101 32x8d model from\n\t`\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\tkwargs['groups'] = 32\n\tkwargs['width_per_group'] = 8\n\treturn _resnet('resnext101_32x8d', Bottleneck, [3, 4, 23, 3],\n\t\t\t\t   pretrained, progress, **kwargs)",
      "metadata": {
         "section_header": "resnext101_32x8d",
         "type": "python function"
      }
   },
   {
      "page_content": "def wide_resnet50_2(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"Wide ResNet-50-2 model from\n\t`\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\tThe model is the same as ResNet except for the bottleneck number of channels\n\twhich is twice larger in every block. The number of channels in outer 1x1\n\tconvolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n\tchannels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\tkwargs['width_per_group'] = 64 * 2\n\treturn _resnet('wide_resnet50_2', Bottleneck, [3, 4, 6, 3],\n\t\t\t\t   pretrained, progress, **kwargs)",
      "metadata": {
         "section_header": "wide_resnet50_2",
         "type": "python function"
      }
   },
   {
      "page_content": "def wide_resnet101_2(pretrained=False, progress=True, **kwargs):\n\tr\"\"\"Wide ResNet-101-2 model from\n\t`\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\tThe model is the same as ResNet except for the bottleneck number of channels\n\twhich is twice larger in every block. The number of channels in outer 1x1\n\tconvolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n\tchannels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\tArgs:\n\t\tpretrained (bool): If True, returns a model pre-trained on ImageNet\n\t\tprogress (bool): If True, displays a progress bar of the download to stderr\n\t\"\"\"\n\tkwargs['width_per_group'] = 64 * 2\n\treturn _resnet('wide_resnet101_2', Bottleneck, [3, 4, 23, 3],\n\t\t\t\t   pretrained, progress, **kwargs)",
      "metadata": {
         "section_header": "wide_resnet101_2",
         "type": "python function"
      }
   }
]